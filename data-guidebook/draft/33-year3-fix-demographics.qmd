---
title: "Reconcile Demographic Variables"
execute:
  warning: false
  message: false
---

```{r, include=FALSE, echo=FALSE}
library( haven )
library( dplyr )
library( tidyr )
library( epoxy )
library( memisc )
library( labelled )

# SOURCE PREVIOUS STEPS
# there were no changes to data in 22-
knitr::purl( "31-year3-recoding-rules.qmd" )   # convert QMD to R script
source(      "31-year3-recoding-rules.R"   )   # run all chunks in prior step

survey_df2 <- as.data.frame( survey_df )

fpath <- "DATA-PREP/02-year-two/02-data-final/"
fname <- "YEAR-02-DATA-RESTRICTED-V01.csv"
year2_final <- read.csv( paste0(fpath,fname) )
```




## Adding Race and Gender Answers from Year 1 Survey

Questions about the race and gender of CEOs and Board Chairs are only presented to users if they indicate that a leadership change has occurred in Year 2 of the survey. Hence, we will need to impute in race and gender responses for participants who did not indicate a change in leadership.

### Identifying cases for imputation

These respondents indicate that there were no changes to their CEO in year 2.

```{r}
have.changes <- 
  ( survey_df$LeadershipChng_HireCEO  == 1 | 
    survey_df$LeadershipChng_IntrmCEO == 1   )

no_ceo_chng_ein <- 
  survey_df2 %>% 
  dplyr::filter( ! have.changes ) %>% 
  dplyr::pull("EIN")

no_bchair_chng_ein <- 
  survey_df2 %>% 
  dplyr::filter( LeadershipChng_ChngBC != 1 ) %>% 
  dplyr::pull("EIN")
```

### Processing Year 1 Data

In Year 1, the survey questions for race and gender are encoded in a single factor variable instead of the multiple boolean variables in Year 2. We will have to wrangle the data from Year 1 into a format for Year 2.

```{r, include=FALSE, echo=FALSE, warning=FALSE}

fpath <- "DATA-PREP/01-year-one/02-data-intermediate/"
fname <- "wave-01-data-intermediate.csv"
year1_raw <- readr::read_csv( paste0( fpath, fname ) )

```

```{r}
# Wrangle Data for Year 1 Responses on CEO race and Gender
year1_CEOchng <- year1_raw %>% 
  dplyr::select(EIN, CEOrace, CEOgender) %>% 
  dplyr::filter(EIN %in% no_ceo_chng_ein,
                ! CEOrace %in% c(-99, NA),
                ! CEOgender %in% c(-99, NA)) %>% 
  dplyr::mutate(
    CEOrace = dplyr::case_match(
      CEOrace,
      1 ~ "AAPI", 2 ~ "Black", 3 ~ "Hisp", 4 ~ "NativeAm", 5 ~ "White", 6 ~ "Bi", 7 ~ "Oth",
      .default = "Oth"
    ),
    CEOgender = dplyr::case_match(
      CEOgender,
      1 ~ "Man", 2 ~ "Woman", 3 ~ "Trans", 4 ~ "NB", 5 ~ "Oth",
      .default = "Oth"
    ),
  race_check = 1,
  gender_check = 1
  ) %>% 
  tidyr::pivot_wider(
    names_from = CEOrace,
    names_glue = "CEOrace_{CEOrace}",
    values_from = race_check, 
    values_fill = 0
  ) %>% 
  tidyr::pivot_wider(
    names_from = CEOgender,
    names_glue = "CEOgender_{CEOgender}",
    values_from = gender_check, 
    values_fill = 0
  )

# Wrangle Data for Year 1 Responses on Board Chair Race and Gender
year1_BCchng <- year1_raw %>% 
  dplyr::select(EIN, BCrace, BCgender) %>% 
  dplyr::filter(EIN %in% no_bchair_chng_ein,
                ! BCrace %in% c(-99, NA),
                ! BCgender %in% c(-99, NA)) %>% 
  dplyr::mutate(
    BCrace = dplyr::case_match(
      BCrace,
      1 ~ "AAPI", 2 ~ "Black", 3 ~ "Hisp", 4 ~ "NativeAm", 5 ~ "White", 6 ~ "Bi", 7 ~ "Oth",
      .default = "Oth"
    ),
    BCgender = dplyr::case_match(
      BCgender,
      1 ~ "Man", 2 ~ "Woman", 3 ~ "Trans", 4 ~ "NB", 5 ~ "Oth",
      .default = "Oth"
    ),
  race_check = 1,
  gender_check = 1
  ) %>% 
  tidyr::pivot_wider(
    names_from = BCrace,
    names_glue = "BChairrace_{BCrace}",
    values_from = race_check, 
    values_fill = 0
  ) %>% 
  tidyr::pivot_wider(
    names_from = BCgender,
    names_glue = "BChairgender_{BCgender}",
    values_from = gender_check, 
    values_fill = 0
  )
```


### Create Biracial Categories in Year 2

Since the Year 1 data has an indicator for biracial CEOs and Board Chairs, we will have to create a boolean Biracial indicator variable in the Year 2 data that returns a 1 if a CEO or Board Chair belongs to 2 or more racial groups.

```{r}
race_ceo_qns_bool <- 
  race_gender_qns_bool[ grepl( "CEOrace", race_gender_qns_bool ) ]
race_bchair_qns_bool <- 
  race_gender_qns_bool[ grepl( "BChairrace", race_gender_qns_bool ) ]

race_qns <- c(race_ceo_qns_bool,race_bchair_qns_bool)

RULES <- c(    
  
  "  Yes =>> 1  ", 
  "  No  =>> 0  "    )

rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

survey_df2[ race_qns ] <- 
  survey_df2[ race_qns ] %>%
  lapply( recode_x, pattern, replace )

survey_df2[ race_qns ] <- 
  survey_df2[ race_qns ] %>%
  lapply( as.numeric )

survey_df2 <- 
  survey_df2 %>%
  dplyr::rowwise() %>% 
  dplyr::mutate(
    CEOrace_Bi = ifelse(dplyr::between(
      sum(dplyr::c_across(tidyselect::all_of(race_ceo_qns_bool)), na.rm = TRUE), 2, 6
    ), 1, 0),
   BChairrace_Bi = ifelse(dplyr::between(
      sum(dplyr::c_across(tidyselect::all_of(race_bchair_qns_bool)), na.rm = TRUE), 2, 6
    ), 1, 0)  
  )
```



### Merge Year 1 Race and Gender Variables with Year 2

```{r}
race_ceo_qns_bool <- c( race_ceo_qns_bool, "CEOrace_Bi" )

for (race_var in race_ceo_qns_bool){
  survey_df2 <- 
    survey_df2 %>% 
    dplyr::mutate(
      !! race_var := ifelse(
         EIN %in% year1_CEOchng$EIN, 
         year1_CEOchng[[race_var]], 
        .data[[race_var]] )
    )
}

gender_ceo_qns_bool <- 
  race_gender_qns_bool[ grepl("CEOgender", race_gender_qns_bool) ]

COLUMNS <- gender_ceo_qns_bool

RULES <- c(    
  
  "  Yes =>> 1  ", 
  "  No  =>> 0  "    )

rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

survey_df2[ COLUMNS ] <- 
  survey_df2[ COLUMNS ] %>%
  lapply( recode_x, pattern, replace )

survey_df2[ COLUMNS ] <- 
  survey_df2[ COLUMNS ] %>%
  lapply( as.numeric )

# lapply( survey_df2[ COLUMNS ], table )

for ( gender_var in gender_ceo_qns_bool ){
  survey_df2 <- 
    survey_df2 %>% 
    dplyr::mutate(
      
      !! gender_var := ifelse(
        
        EIN %in% year1_CEOchng$EIN & gender_var %in% names( year1_CEOchng ), 
        year1_CEOchng[[ gender_var ]], 
        .data[[ gender_var ]]
      
      )
    )
}

race_bchair_qns_bool <- c(race_bchair_qns_bool, "BChairrace_Bi")

COLUMNS <- race_bchair_qns_bool

RULES <- c(    
  
  "  Yes =>> 1  ", 
  "  No  =>> 0  "    )

rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

survey_df2[ COLUMNS ] <- 
  survey_df2[ COLUMNS ] %>%
  lapply( recode_x, pattern, replace )

# lapply( survey_df2[ COLUMNS ], table )

survey_df2[ COLUMNS ] <- 
  survey_df2[ COLUMNS ] %>%
  lapply( as.numeric )

for (race_var in race_bchair_qns_bool){
  survey_df2 <- survey_df2 %>% 
  dplyr::mutate(
    !! race_var := ifelse(
    EIN %in% year1_BCchng$EIN, 
    year1_BCchng[[race_var]], 
    .data[[race_var]]
    )
  )
}

gender_bchair_qns_bool <- 
  race_gender_qns_bool[ grepl("BChairgender", race_gender_qns_bool) ]

COLUMNS <- gender_bchair_qns_bool

RULES <- c(    
  
  "     Yes =>> 1  ", 
  "     No  =>> 0  ",
  "  Female =>> 1  ", 
  "  Male   =>> 1  "  )

rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

survey_df2[ COLUMNS ] <- 
  survey_df2[ COLUMNS ] %>%
  lapply( recode_x, pattern, replace )

# lapply( survey_df[ COLUMNS ], table )

survey_df2[ COLUMNS ] <- 
  survey_df2[ COLUMNS ] %>%
  lapply( as.numeric )

for (gender_var in gender_bchair_qns_bool){
  survey_df2 <- survey_df2 %>% 
  dplyr::mutate(
    !! gender_var := ifelse(
    EIN %in% year1_BCchng$EIN & gender_var %in% names(year1_BCchng), 
    year1_BCchng[[gender_var]], 
    .data[[gender_var]]
    )
  )
}
```



### Recode New Race and Gender Variables

```{r}
create_survey_item <- function( 
    survey_data, 
    qns, 
    recode_vals, 
    recode_labs, 
    missing_vals ){

  survey_data <- 
    survey_data %>%
    purrr::modify_at(
      .at = qns,
      .f = memisc::as.item,
      labels = structure(
        .Data = recode_vals,
        names = recode_labs ),
      missing.values = missing_vals )
      
  return( survey_data )
}
```

```{r}
survey_df2 <- create_survey_item(
  survey_df2, 
  race_ceo_qns_bool, 
  recode_vals = c(0, 1, 99), 
  recode_labs = c("No", "Yes", "Incomplete"), 
  missing_vals = c(99)
)

survey_df2 <- create_survey_item(
  survey_df2, 
  gender_ceo_qns_bool, 
  recode_vals = c(0, 1, 99), 
  recode_labs = c("No", "Yes", "Incomplete"), 
  missing_vals = c(99)
)

survey_df2 <- create_survey_item(
  survey_df2, 
  race_bchair_qns_bool, 
  recode_vals = c(0, 1, 99), 
  recode_labs = c("No", "Yes", "Incomplete"), 
  missing_vals = c(99)
)

survey_df2 <- create_survey_item(
  survey_df2, 
  gender_bchair_qns_bool, 
  recode_vals = c(0, 1, 99), 
  recode_labs = c("No", "Yes", "Incomplete"), 
  missing_vals = c(99)
)
```



### Create single Race/Gender column

While our race and gender columns are individual binary columns, this is not the case for year 1 and 3 results. Both those years contain single columns for race and gender variables for CEOs and Board Chairs respectively. For easier comparability, we create a new variable aggregating race and gender values for all our individual binary columns.



#### Aggregated Race Variable

| Original Value | Description | Recode Label | Recode Value | Missing ? |
|---|---|---|---|---|
|1|Asian/Pacific Islander|AAPI|1|No|
|1|Black/African American|Black|2|No|
|1|Latinx/Hispanic|Hisp|3|No|
|1|Native American/American Indian|NativeAm|4|No|
|1|White|White|5|No|
|1|Bi/Multi-racial|Bi|6|No|
|1|Other (please specify)|Oth|7|No|
|0|Checkbox Unchecked|NA|Yes|

```{r}
# Create New Race variables
survey_df2 <- survey_df2 %>%
  dplyr::mutate(
    CEOrace = dplyr::case_when(
      CEOrace_AAPI == 1 ~ 1,
      CEOrace_Black == 1 ~ 2,
      CEOrace_Hisp == 1 ~ 3,
      CEOrace_NativeAm == 1 ~ 4,
      CEOrace_White == 1 ~ 5,
      CEOrace_Bi == 1 ~ 6,
      CEOrace_Oth == 1 ~ 7,
      .default = NA
    ),
    BChairrace = dplyr::case_when(
      BChairrace_AAPI == 1 ~ 1,
      BChairrace_Black == 1 ~ 2,
      BChairrace_Hisp == 1 ~ 3,
      BChairrace_NativeAm == 1 ~ 4,
      BChairrace_White == 1 ~ 5,
      BChairrace_Bi == 1 ~ 6,
      BChairrace_Oth == 1 ~ 7,
      .default = NA
  ))

# Create Survey Item
survey_df2 <- create_survey_item(
  survey_df2, 
  c("CEOrace", "BChairrace"), 
  recode_vals = c(1, 2, 3, 4, 5, 6, 7), 
  recode_labs = c("AAPI", "Black", "Hisp", "NativeAm", "White", "Bi", "Oth"), 
  missing_vals = c()
)
```



#### Aggregated Gender Variable

| Original Value | Description | Recode Label | Recode Value | Missing ? |
|1|Man|Man|1|No|
|1|Woman|Woman|2|No|
|1|Trans|Trans|3|No|
|1|Gender non-conforming/Non-Binary|NB|4|No|
|1|Other (please specify)|Oth|5|No|
|0|Checkbox Unchecked|NA|Yes|

```{r}
# Create New Race variables
survey_df2 <- survey_df2 %>%
  dplyr::mutate(
    CEOgender = dplyr::case_when(
      CEOgender_Man == 1 ~ 1,
      CEOgender_Woman == 1 ~ 2,
      CEOgender_Trans == 1 ~ 3,
      CEOgender_NB == 1 ~ 4,
      CEOgender_Oth == 1 ~ 5,
      .default = NA
    ),
    BChairgender = dplyr::case_when(
      BChairgender_Man == 1 ~ 1,
      BChairgender_Woman == 1 ~ 2,
      BChairgender_Trans == 1 ~ 3,
      BChairgender_NB == 1 ~ 4,
      BChairgender_Oth == 1 ~ 5,
      .default = NA
  ))

# Create Survey Item
survey_df2 <- create_survey_item(
  survey_df2, 
  c("CEOgender", "BChairgender"), 
  recode_vals = c(1, 2, 3, 4, 5), 
  recode_labs = c("Man", "Woman", "Trans", "NB", "Oth"), 
  missing_vals = c()
)
```



### Validate Results

We can see that the number of valid responses for race and gender questions concerning the CEO and Board Chair have increased.

```{r}
race_gender_qns <- 
  c( race_gender_qns_bool, 
     "CEOrace", "CEOgender", "BChairrace","BChairgender" )

codebook( survey_df2[ race_gender_qns ] )
```



## Evaluating Survey Completion Rates and Summing Section Completion

We next evaluate survey completion rates for each category of questions. We separate our variables into question categories and compute the proportion of valid responses. 

```{r, warning=FALSE}
# Create named list of variables

survey_completion_qns_ls <- list(
  "Program Changes" = program_change_qns_bool,
  "People Served" = people_served_qns_int,
  "Next Year's Demand" = demand_fct_qns,
  "Staff & Volunteers" = staff_qns_int,
  "Volunteer Importance" = volimportance_qns_fct,
  "Donor Importance" = donimportance_qns_fct,
  "Fundraising" = fundraise_qns_bool,
  "Major Gift Amount" = majorgift_qn_num,
  "Fundraising Changes" = fundraise_change_qns_fct,
  "Donor Changes" = fundraise_donor_qns_int,
  "Fundraising Sought/Received" = fundraise_skrcv_qns_bool,
  "Revenue Breakdown" = finance_revenue_qns_num,
  "Reserves" = reserve_qns_num,
  "CARES Funding" = cares_qns_num,
  "Finance Changes" = finance_chng_qns_bool,
  "Leadership Changes" = leadership_chng_qns_bool,
  "Race and Gender" = c(race_gender_qns_bool, "BChairrace_Bi", "CEOrace_Bi"),
  "External Affairs" = extaffairs_qns_fct,
  "Primary Concern" = primary_cncrn_qn_text)
# Include Response IDs into questions
survey_completion_qns <- c("ResponseID", unname(unlist(survey_completion_qns_ls)))
# Subset Survey to only include questions to calculate response rates
survey_subset <- survey_df2 %>% 
  dplyr::select(
    tidyselect::all_of(survey_completion_qns)
    )
# Compute response rate
response_rate_ls <- purrr::imap(
  .x = survey_completion_qns_ls,
  .f = function(qns, qn_group) {
    # Compute responses for each question belonging to a group
    sum_ls <- purrr::map(qns,
           .f = function(qn){
             rs <- as.integer(survey_subset[[qn]])
             rs <- ifelse(! is.na(rs), 1, 0)
             return(rs)
           })
    # Perform rowwise sum for questions belonging to a group to get number of valid responses
    sum_qn <- purrr::pmap(sum_ls, sum, na.rm = TRUE)
    survey_subset[[qn_group]] <- unlist(sum_qn)
    # Compute response rate based on number of questions in that group
    output_df <- survey_subset %>% 
      dplyr::mutate(!!qn_group := .data[[qn_group]] / length(qns)) %>% 
      dplyr::select(tidyselect::all_of(c("ResponseID", qn_group)))
    return(output_df)
  },
  .progress = TRUE
)

response_rate_df <- purrr::reduce(response_rate_ls,
                                  dplyr::left_join,
                                  by = "ResponseID")

# Exclude Qualtrics Test Responses
testcases = c(
  "R_1lB6u4BoFZWFeXI",
  "R_3e3RyQttJeNzqLu",
  "R_3kzeIxsE73IIoq9",
  "R_2BxNQBmrv4Dr9Dn",
  "R_Q4WjxQdBfeZbn4B",
  "R_xFNLuOjPbg6iL6N",
  "R_3McyCOS2Gv7FNcd",
  "R_9YWW00fssFUBEYh",
  "R_PNiTwNoQSfvuRkB",
  "R_111PYLkD7mpeFui",
  "R_a59rvIufWBZhAhr",
  "R_3MGb8by31yzxYW7",
  "R_1exbPd4NNpfWrFt",
  "R_2PwfUW9idAwPE1w",
  "R_3EunbLVD5Ce8b93",
  "R_2uO55NoBulnQTvx",
  "R_Wl2yqsO0HXhhaTv",
  "R_1kSRidkXneLKy4u",
  "R_3j3DCg6oVhQWRe0"
)

response_rate_df <- 
  response_rate_df %>% 
  dplyr::filter(! ResponseID %in% weighted_survey_df$ResponseId )

response_rate_df
```



## Save outputs


```{r}
fpath <- "DATA-PREP/02-year-two/02-data-intermediate/"
fname <- "WAVE-02-DATA-V2-WITH-LABELS.csv"
write.csv( survey_df2, paste0( fpath, fname ), row.names=F, na="" )
```


```{r}
fpath <- "DATA-PREP/02-year-two/02-data-intermediate/"
fname <- "DATA-CODEBOOK.txt"
memisc::Write( codebook(survey_df2), file=paste0( fpath, fname ) )
```





<style>

h1, h2 {
  margin-top: 80px
}

.codebook-entry {
   background-color: beige;
   margin-top: 20px;
}
</style>

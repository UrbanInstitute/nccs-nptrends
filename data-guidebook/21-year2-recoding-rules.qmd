---
title: "Relabeling Qualtrics Variables"
execute:
  warning: false
  message: false
---

```{r, include=FALSE, echo=FALSE}
library( haven )
library( dplyr )
library( tidyr )
library( epoxy )
library( memisc )
library( labelled )

# SOURCE PREVIOUS STEPS 

knitr::purl( "20-YEAR-TWO.qmd" )   # convert QMD to R script
source( "20-YEAR-TWO.R" )          # run all chunks in prior step

```


```{r, eval=F, echo=F}
# LOAD SURVEY DATA FROM SAVED FILE AFTER LAST CHAPTER

fpath <- "DATA-PREP/02-year-two/02-data-intermediate/"
fname <- "SURVEYDF.csv"
survey_df <- read.csv( paste0( fpath, fname ) )

# LOAD DATA DICTIONARY 

dd <- readxl::read_xlsx( 
        "../data-dictionaries/dd-nptrends-wave-02.xlsx", 
        sheet = "data dictionary" )
```


Qualtrics uses some random values like -99 to encode for things like skipped questions, "not sure" categories, or "not applicable" answers. Currently one needs to a dictionary to look up every variable to understand what each value means. 

In addition, some response categories are confusing because they equate to a missing response. For example, from an analytical perspective an answer of "not sure" and skipping the question completely both equate to a missing value when the response categories are yes or no.  

The **memisc** package was designed for working with survey data. It allows you to label response categories in the data and also designate different types of missingness (e.g. Unsure, N/A, and -99 can all be coded as missing).

Several factor and boolean variables in this survey data set have inconsistent coding. They are recoded in this section and the decision criteria are documented for inspection and review.

```{r, echo=F}
# Functions to convert survey variable to survey
# item with missingness and variable labels

recode_x <- function( x, pattern, replace ){
  stringi::stri_replace_all_fixed( x, pattern, replace, vectorize_all=F  )
}


as_memisc_item <- function( x, val.x, lab.x, missing.x=NULL ){
  
  # add unnamed values 
  diff <- setdiff( x, val.x ) |> na.omit()
  val.x <- c( val.x, diff )
  lab.x <- c( lab.x, diff )
  
  # assign labels 
  names( val.x ) <- lab.x
  
  # convert to memisc survey item
  x <- x |> 
    memisc::as.item(
      labels = val.x,
      missing.values = missing.x ) 
  
  return(x)  
}

# wrapper for both steps

f <- function( x, pattern, replace, val.x, lab.x, missing.x=NULL ){
  x <- recode_x( x, pattern, replace )
  x <- as_memisc_item( x, val.x, lab.x, missing.x )
  return(x)
}

# add question labels for columns k

add_q_details <- function( x, df ){
  
  v <- df[[x]]
  
  # add question label attribute
  q.label <- dd$vlabel[ dd$vname == x ] |> 
    na.omit() |>
    paste0( collapse=" ;; " )
 
  # add variable type attribute
  q.type <- dd$type[ dd$vname == x ] |> 
    na.omit() |>
    paste0( collapse=" ;; " )
  
  # add question text
  q.text <- dd$description[ dd$vname == x ] |> na.omit()
    
  wording( v )     <- q.label
  description( v ) <- paste0( "TYPE: ", q.type )
  annotation( v )["QUESTION TXT"] <- q.text 
  
  return( v )
}

# apply rules to specific columns K

recode_columns <- function( df, k, pattern, replace, val.x, lab.x, mis.x=NULL ){
  df[ k ] <- lapply( df[k], f, pattern, replace, val.x, lab.x, mis.x )
  df[ k ] <- purrr::map( k, add_q_details, df )
  return(df)
}


# ALTERNATIVE REPRESENTATION OF RECODING RULES

parse_rules <- function(x) {
  L <- strsplit( x, "=>>|~" )
  L <- lapply( L, trimws )
  m <- matrix( unlist(L), byrow=T, ncol=2 )
  d <- as.data.frame( m )
  names( d ) <- c("pattern","replace")
  return( d )
}


# CLEANING NON-NUMERIC VALUES FROM NUMERIC RESPONSES

keep_numbers <- function(x){
  x <- gsub( "[$,]", "", x ) %>% as.numeric()
  x[ x == -99 ] <- Inf
  return(x)
}
```



```{r, eval=F, echo=F}

#####
#####   FUNDRAISING EXAMPLE
#####

# APPLY TO COLUMNS K:
COLUMNS <-  fundraise_skrcv_qns_bool

# VALUES FOR RECODING 
pattern <- c( "(select all that apply)", "-99" )
replace <- c( "1", "0" )

# MEMISC LABELS AND MISSING VALUE CODES  
values  <- c("0", "1")
labels  <- c( "No", "Yes" )
missing <- "UNSURE"

d2 <- dplyr::select( survey_df, all_of( COLUMNS ) )
d3 <- recode_columns( d2, k=COLUMNS, pattern, replace, values, labels, missing )
codebook( d3 )
```





```{r, eval=F, echo=F}

# ALTERNATIVE REPRESENTATION OF RECODING RULES

RULES <- c(     ### -----------------------------
       
  "   (select all that apply)   =>>   1   ", 
  "                       -99   =>>   0   "    

)               ### ------------------------------


# VALUES FOR RECODING 
rules <- parse_rules( RULES )
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES  
values  <- c("0", "1")
labels  <- c( "No", "Yes" )
missing <- "UNSURE"

d3 <- recode_columns( d2, k=COLUMNS, pattern, replace, values, labels, missing )
codebook( d3 )

```



```{r, eval=F, echo=F}
# NUMERIC ENCODING WITH MEMISC TO PRESERVE MISSING CASES
#
#   We want to use a number to preserve the numeric data,
#   but we don't want to number to impact computations.
#   Ideally the user has to remove missing values before 
#   any computations so that the missing values are not
#   polluting the statistics.

#   Options: -n (n being any value), NaN, Inf

survey_df <- read.csv( paste0( fpath, fname ) )
x <- survey_df[[ "FndRaise_MajGift_Amt" ]]
sum( x == -99, na.rm=T )  # 18 missing values


x[ x == -99 ] <- -1   # user might calculate without realizing
x[ x == -99 ] <- NaN  # can't calculate until dropping and distinct from NA;
                      #   - memisc doesn't recognize as missing value though
x[ x == -99 ] <- Inf  # this one works 


keep_numbers <- function(x){
  x <- gsub( "[$,]", "", x ) %>% as.numeric()
  x[ x == -99 ] <- Inf
  return(x)
}

x <- survey_df[[ "FndRaise_MajGift_Amt" ]]
x <- keep_numbers( x )
x <- memisc::as.item( x, missing.values=Inf )

codebook( x )

   #   Storage mode: double
   #   Measurement: interval
   #   Missing values: Inf
   # 
   #   Values                  N Percent
   #                                  
   #      M (unlab.mss.)      18     2.2
   #   NA M                  156    19.0
   #                                  
   #        Min:       0.010            
   #        Max: 1000000.000            
   #       Mean:    5935.894            
   #   Std.Dev.:   44801.714

# missing values preserved in memisc object
x %>% print()
x %>% include.missings() %>% as.integer()


# converted to NA when saving to file
x %>% as.numeric() %>% summary()
```















# Yes/No Questions


| Original Value | Description | Recode Value | Code as Missing ? |
|---|---|---|---|
|Yes|Yes|1|No|
|No|No|0|No|
|Unsure|Unsure|97|Yes|
|N/A|Not Applicable|98|Yes|
|-99|Incomplete|99|Yes|
|NA| Unanswered|NA|Yes|


```{r}
# APPLY TO COLUMNS K:
bool_qns <- 
  c( program_change_qns_bool, 
     fundraise_qns_bool, 
     cares_qns_bool, 
     finance_chng_qns_bool, 
     leadership_chng_qns_bool )

COLUMNS <-  bool_qns

# VALUES THAT NEED RECODING
RULES <- c(
  
           "  Yes    =>>    1    ", 
           "  No     =>>    0    ", 
           "  Unsure =>>    97   ", 
           "  N/A    =>>    98   ", 
           "  -99    =>>    99   "   )

rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]


# MEMISC LABELS AND MISSING VALUE CODES
values  <- c( 0, 1, 97, 98, 99 )
labels  <- c( "No", "Yes", "Unsure", "Not Applicable", "N/A" )
missing <- c( 97, 98, 99 )

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
# codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```







# Single Checkboxes

These questions are presented as a checkbox to the respondent. They indicate an affirmative answer to the question.





## Seek or Receive Fundraising Questions

These checkboxes are ticked by the respondent to indicate if they have sought or received funding from a specific source.

| Original Value | Description | Recode Label | Recode Value | Code as Missing? |
|---|---|---|---|---|
|(select all that apply)|Checkbox Checked|Yes|1|No|
|-99|Checkbox Unchecked|No|0|No|
|NA|Unanswered|NA|NA|Yes|


```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  fundraise_skrcv_qns_bool

# VALUES THAT NEED RECODING

RULES <- c(    
  
  "  (select all that apply)    =>>    1    ", 
  "                      -99    =>>    0    "    )


rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( "0", "1" )
labels  <- c( "No", "Yes" )
missing <- "UNSURE"

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
# codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```






## Race and Gender Checkboxes

These checkboxes are ticked by the respondent to indicate if their CEO or board chair belong to a specified race or gender identity.

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Asian/Pacific Islander|Checkbox Checked|Yes|1|No|
|Black/African American|Checkbox Checked|Yes|1|No|
|Latinx/Hispanic|Checkbox Checked|Yes|1|No|
|Native American/American Indian|Checkbox Checked|Yes|1|No|
|White|Checkbox Checked|Yes|1|No|
|Man|Checkbox Checked|Yes|1|No|
|Woman|Checkbox Checked|Yes|1|No|
|Trans|Checkbox Checked|Yes|1|No|
|Gender non-conforming/Non-Binary|Checkbox Checked|Yes|1|No|
|Other (please specify)|Checkbox Checked|Yes|1|No|
|0|Checkbox Unchecked|No|0|No|
|-99|Incomplete|Incomplete|99|Yes|
|NA|Unanswered|NA|NA|Yes|



```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  race_gender_qns_bool

# VALUES THAT NEED RECODING

RULES <- c(    
  
          "          Asian/Pacific Islander    =>>     1   ",
          "          Black/African American    =>>     1   ",
          "                 Latinx/Hispanic    =>>     1   ",
          " Native American/American Indian    =>>     1   ",
          "                           White    =>>     1   ",
          "                             Man    =>>     1   ",
          "                           Woman    =>>     1   ",
          "                           Trans    =>>     1   ",
          "Gender non-conforming/Non-Binary    =>>     1   ",
          "         Other (please specify):    =>>     1   ",
          "                             -99    =>>     x   ",
          "                               0    =>>     0   "     )


rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( "0", "1", "x" )
labels  <- c( "No", "Yes", "Incomplete" )
missing <- "x"

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```





## N/A Checkboxes

These questions are presented as a checkbox to the user to indicate that a question is not applicable. "Yes" here means "Yes, this question is not applicable".

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|C|Yes, this question is not applicable|Yes|1|No|
|N/A|Yes, this question is not applicable|Yes|1|No|
|-99|Incomplete|No|0|No|
|NA|Unanswered|NA|NA|Yes|

```{r}
na_bool_qns <- 
  c( staff_qns_bool, 
     reserve_qns_bool, 
     people_served_qns_bool )


# APPLY TO COLUMNS K:
COLUMNS <-  na_bool_qns

# VALUES THAT NEED RECODING

RULES <- c(    
          
             "    C    =>>     1   ", 
             "  -99    =>>     0   ", 
             "  N/A    =>>     1   "     )


rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( "0", "1" )
labels  <- c( "No", "Yes" )
missing <- NULL

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```





# Multi-selection Inputs

These questions offer the user with multiple options to select one from. Since the options are ordered categories, they are coded on an ordinal scale.

## Increase - Decrease Questions

There 2 questions that ask respondents to define changes via an increase or decrease
relative to previous years. They are recoded on an ordinal scale.

## Changes in Demand Questions

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Increase|Increase|Increase|2|No|
|Stay the same|Stay the same|Unchanged|1|No|
|Decrease|Decrease|Decrease|0|No|
|-99|Incomplete|No|99|Yes|
|NA|Unanswered|NA|NA|Yes|


```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  demand_fct_qns

# VALUES THAT NEED RECODING

RULES <- c(    
          
             "        Decrease    =>>     0   ",
             "   Stay the same    =>>     1   ", 
             "        Increase    =>>     2   ", 
             "             -99    =>>     x   "    )


rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( 2, 1, 0, "x" )
labels  <- c( "Increase", "Unchanged", "Decrease", "Incomplete" )
missing <- "x"

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```






## Changes in Fundraising Questions

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Increased significantly (by more than 10%)|Largest Increase|Increase Significantly|5|No|
|Increased moderately (by less than 10%)|Second Largest Increase|Increase Moderately|4|No|
|Stayed more or less the same|Third Largest Increase|Unchanged|3|No|
|Decreased moderately (by less than 10%)|Fourth Largest Increase|Decrease Moderately|2|No|
|Decreased significantly (by more than 10%)|Fifth Largest Increase|Decrease Significantly|1|No|
|Unsure|Unsure|Unsure|99|Missing|
|-99|Incomplete|Incomplete|98|Yes|
|N/A|Not Applicable|Not Applicable|97|Yes|
|NA|Unanswered|NA|NA|Yes|



```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  fundraise_change_qns_fct

# VALUES THAT NEED RECODING

RULES <- c(    
          
     "   Increased significantly (by more than 10%)    =>>     5   ",
     "      Increased moderately (by less than 10%)    =>>     4   ",
     "                 Stayed more or less the same    =>>     3   ",
     "      Decreased moderately (by less than 10%)    =>>     2   ",
     "   Decreased significantly (by more than 10%)    =>>     1   ",
     "                                       Unsure    =>>     0   ",
     "                                          -99    =>>     X   ",
     "                                          N/A    =>>   N/A   "  )
 
rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( 5, 4, 3, 2, 1, 0, "X", "N/A" )
labels  <- c( "Increase Significantly", "Increase Moderately", 
              "Unchanged", "Decrease Moderately", "Decrease Significantly", 
              "Unsure", "Incomplete", "Not Applicable" )
missing <- c( "X" )

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```






# Level of Importance Questions

There are 2 questions that ask respondents to rank the importance of volunteers and donors respectively. However, both sets of options' are not identical. Hence, they are recoded to common values for reproducibility.

## Volunteer Importance

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Essential - we depend entirely on volunteers to carry out our mission and goals|Maximum Importance|Essential|5|No|
|Very important - we depend on volunteers for a wide range of tasks, but not all|Second Most Important|Very Important|4|No|
|Somewhat important - we depend on volunteers for several key tasks|Third Most Important|Somewhat Important|3|No|
|Not very important - we depend on volunteers for only non-essential tasks|Fourth Most Important|Not Very Important|2|No|
|Not at all important - we could carry out our mission and goals without using volunteers|Fifth Most Important|Not At All Important|1|No|
|We do not use volunteers|Sixth Most Important|Not Used|0|No|
|-99|Incomplete|Incomplete|99|Yes|
|NA|Unanswered|NA|NA|Yes|


```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  volimportance_qns_fct

# VALUES THAT NEED RECODING

RULES <- c(    

"           Essential - we depend entirely on volunteers to carry out our mission and goals    =>>     5   ",
"           Very important - we depend on volunteers for a wide range of tasks, but not all    =>>     4   ",
"                        Somewhat important - we depend on volunteers for several key tasks    =>>     3   ",
"                 Not very important - we depend on volunteers for only non-essential tasks    =>>     2   ",
"  Not at all important - we could carry out our mission and goals without using volunteers    =>>     1   ",
"                                                                  We do not use volunteers    =>>     0   ",
"                                                                                       -99    =>>     X   "    )

rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( 5, 4, 3, 2, 1, 0, "X" )
labels  <- c( "Essential", "Very Important", "Somewhat Important", 
              "Not Very Important", "Not At All Important", "Not Used", 
              "Incomplete" )
missing <- c( "X" )

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```






## Donor Importance

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Essential, we depend entirely on individual donations to carry out our mission and goals|Maximum Importance|Essential|5|No|
|Very important, we depend on individual donations for a wide range of activities, but not all|Very Important|4|No|
|Important, we depend on individual donations for several key activities|Third Most Important|Somewhat Important|3|No|
|Not very important, we depend on individual donations for only non-essential activities|Fourth Most Important|Not Very Important|2|No|
|Not at all important, we could carry out our mission and goals without donations from individuals|Fifth Most Important|Not At All Important|1|No|
|We do not receive donations from individuals|Sixth Most Important|Not Used|0|No|
|-99|Incomplete|Incomplete|99|Yes|
|NA|Unanswered|NA|NA|Yes|


```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  donimportance_qns_fct

# VALUES THAT NEED RECODING

RULES <- c(    

  "          Essential, we depend entirely on individual donations to carry out our mission and goals  =>>  5  ",
  "     Very important, we depend on individual donations for a wide range of activities, but not all  =>>  4  ",
  "                           Important, we depend on individual donations for several key activities  =>>  3  ",
  "           Not very important, we depend on individual donations for only non-essential activities  =>>  2  ",
  " Not at all important, we could carry out our mission and goals without donations from individuals  =>>  1  ",
  "                                                      We do not receive donations from individuals  =>>  0  ",
  "                                                                                               -99  =>>  X  "  )


rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c(5, 4, 3, 2, 1, 0, "X" )
labels  <- c( "Essential", "Very Important", 
              "Somewhat Important", "Not Very Important", 
              "Not At All Important", "Not Used", "Incomplete")
missing <- c( "X" )

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```











# Frequency Questions

These questions ask respondents to rank the frequency at which they engage in an activity.

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Frequently|Most Frequent|Frequently|4|No|
|Almost all the time|Second Most Frequent|More Often Than Not|3|No|
|Occasionally|Third Most Frequent|Occasionally|2|No|
|Rarely|Fourth Most Frequent|Rarely|1|No|
|Never|Fifth Most Frequent|Occasionally|0|No|
|-99|Incomplete|Incomplete|99|Yes|
|NA|Unanswered|NA|NA|Yes|


```{r}
# APPLY TO COLUMNS K:
COLUMNS <-  extaffairs_qns_fct

# VALUES THAT NEED RECODING

RULES <- c(    

     "             Frequently    =>>     4   ",
     "    Almost all the time    =>>     3   ",
     "           Occasionally    =>>     2   ",
     "                 Rarely    =>>     1   ",
     "                  Never    =>>     0   ",
     "                    -99    =>>     X   "   )
     
rules <- parse_rules( RULES )          
pattern <- rules[[ "pattern" ]]
replace <- rules[[ "replace" ]]

# MEMISC LABELS AND MISSING VALUE CODES 
values  <- c( 4, 3, 2, 1, 0, "X" )
labels  <- c( "Frequently", "More Often than Not", 
              "Occasionally", "Rarely", "Never", "Incomplete" )
missing <- c( "X" )

# RECODE VARIABLES 
survey_df <- 
  survey_df %>% 
  recode_columns( k=COLUMNS, pattern, replace, values, labels, missing )
```

```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```












# Integer Inputs

These questions accept an integer input from users to indicate the number of staff they have, people they served, or donors they have. 

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Whole Number|Number of Staff, People or Donors|NA|Integer Value|No|
|N/A|Not Applicable|NA|-1|Yes|
|-99|Incomplete|NA|-2|Yes|
|NA|Unanswered|NA|NA|Yes|

```{r}
int_qns <- 
  c( staff_qns_int, 
     people_served_qns_int, 
     fundraise_donor_qns_int )

COLUMNS <- int_qns

survey_df[ COLUMNS ] <- 
  survey_df[ COLUMNS ] %>%
  lapply( recode_x, pattern=c("N/A","-99"), replace=c("Inf","Inf") )

survey_df[ COLUMNS ] <- 
  survey_df[ COLUMNS ] %>%
  lapply( as.numeric )

survey_df[ COLUMNS ] <- 
  survey_df[ COLUMNS ] %>%
  lapply( memisc::as.item, missing.values=Inf )

survey_df[ COLUMNS ] <- purrr::map( COLUMNS, add_q_details, survey_df )
```


```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html(codebook( survey_df[ COLUMNS[1] ] ))
```







# Numeric Inputs

These questions accept a numeric input from users to denote dollar values.
For some variables, additional processing is done to remove commas and "$" signs.

| Original Value | Description | Recode Label | Recode Value | Code as Missing ? |
|---|---|---|---|---|
|Dollar Amount|Dollar Amount|NA|Numeric Value|No|
|-99|Incomplete|NA|-1|Yes|
|NA|Unanswered|NA|NA|Yes|

```{r, warning=FALSE}
numeric_qns <- 
  c( majorgift_qn_num, 
     reserve_qns_num, 
     cares_qns_num, 
     finance_revenue_qns_num )

COLUMNS <- numeric_qns

survey_df[ COLUMNS ] <- 
  survey_df[ COLUMNS ] %>% 
  lapply( keep_numbers )

survey_df[ COLUMNS ] <- 
  survey_df[ COLUMNS ] %>%
  lapply( memisc::as.item, missing.values=Inf )

survey_df[ COLUMNS ] <- purrr::map( COLUMNS, add_q_details, survey_df )
```


```{r, eval=F, echo=F}
codebook( survey_df[ COLUMNS[2] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html( codebook( survey_df[ COLUMNS[1] ] ))
```




# Text Inputs

These questions allow the user to enter raw text as answers. All non-text values are converted to NAs.

```{r}
text_qns <- 
  c( staff_qns_text, 
     finance_chng_qns_text, 
     finance_revenue_qns_text, 
     fundraise_qns_text, 
     leadership_chng_qns_text, 
     primary_cncrn_qn_text, 
     program_change_qns_txt, 
     race_gender_qns_text)

survey_df[ text_qns ] <- 
  survey_df[ text_qns ] %>%
  lapply( recode_x, pattern="-99", replace=NA )

survey_df[ text_qns ] <- 
  survey_df[ text_qns ] %>%
  lapply( memisc::as.item )

survey_df[ text_qns ] <- purrr::map( text_qns, add_q_details, survey_df )

codebook( survey_df[ text_qns[1] ] )
```


```{r, eval=F, echo=F}
# codebook( survey_df[ COLUMNS[1] ] )
```

**Example:**

```{r, results="asis", echo=F}
show_html( codebook( survey_df[ text_qns[1] ] ))
```





```{r, echo=F}
#### 
####   CLEANUP
#### 

# temp file for use in next chapter 

fpath <- "DATA-PREP/02-year-two/02-data-intermediate/"
fname <- "SURVEYDF-step21.csv"
write.csv( survey_df, paste0( fpath, fname ), row.names=F )

rdsname <- "SURVEYDF-step21.rds"
saveRDS( survey_df, paste0( fpath, rdsname ) )
```





<style>

h1, h2 {
  margin-top: 80px
}

.codebook-entry {
   background-color: beige;
   margin-top: 20px;
}
</style>


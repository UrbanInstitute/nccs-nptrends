[
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "05-anonymization.html",
    "href": "05-anonymization.html",
    "title": "Anonymization",
    "section": "",
    "text": "In this section we’ll work through variables with potentially identifiable information and either exclude/anonymize them."
  },
  {
    "objectID": "05-anonymization.html#continuous-variables",
    "href": "05-anonymization.html#continuous-variables",
    "title": "Anonymization",
    "section": "Continuous Variables",
    "text": "Continuous Variables\n\nSurvey Variables\nVariables with numeric or integer inputs can be identifiable using publicly available 990 data. They are presented in the table below.\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nReserves_Est\nDollar Value of Financial Reserves\n\n\nCARES_Rcv_Est\nDollar Value of CARES Funding\n\n\nFinance_Rev_GovtMain\nDollar Value of Revenue from Government Agencies\n\n\nFinance_Rev_Prtcpnt\nDollar Value of Revenue from Self-Paying Participants\n\n\nFinance_Rev_Govt3rdParty\nDollar Value of Revenue from Government as Third-Party Payer\n\n\nFinance_Rev_IndvDon\nDollar Value of Revenue from Individual Donations\n\n\nFinance_Rev_Gift\nDollar Value of Revenue from In-Kind Gifts\n\n\nFinance_Rev_Grnt\nDollar Value of Revenue from Private Foundations/Corporate Grants\n\n\nFinance_Rev_Spnsr\nDollar Value of Revenue from Corporate Sponsorships\n\n\nFinance_Rev_Oth\n\n\n\n\nWe anonymize by randomly sampling and adding a small amount of noise to the data.\n\ncols_to_anonymize &lt;- c(\n  \"CARES_Rcv_Est\",\n  \"Finance_Rev_GovtMain\",\n  \"Finance_Rev_Prtcpnt\",\n  \"Finance_Rev_Govt3rdParty\",\n  \"Finance_Rev_IndvDon\",\n  \"Finance_Rev_Gift\",\n  \"Finance_Rev_Grnt\",\n  \"Finance_Rev_Spnsr\",\n  \"Finance_Rev_Oth\"\n)\n\n# Create anonymization function\nanon_continuous &lt;- function(var){\n  var &lt;- var * (1 + runif(n=1, min=-0.05, max=0.05))\n  var &lt;- var * (1 + rnorm(n=1, sd=0.05))\n  return(var)\n}\n\n# Anonymize Continuous Variables\nsurvey_anon_df &lt;- survey_census_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      tidyselect::all_of(cols_to_anonymize),\n      ~ anon_continuous(.x)\n    )\n  )\n\n\n\nCensus Variables\nSimilarly, census metadata at tract and CBSA levels can be used to identify the specific location of a nonprofit, leading to identification. We apply the same anonymization process to these columns.\n\n# Retrieve Census variables for anonymization\ncensus_cols_to_anonymize &lt;-\n  c(\n    \"total_population_County\",\n    \"housing_units_County\",\n    \"occupied_County\",\n    \"vacant_County\",\n    \"renter_occ_County\",\n    \"white_perc_County\",\n    \"black_perc_County\",\n    \"asian_perc_County\",\n    \"hawaiian_perc_County\",\n    \"american_alaskan_perc_County\",\n    \"two_or_more_perc_County\",\n    \"other_perc_County\",\n    \"rural_perc_County\",\n    \"bachelors_perc_County\",\n    \"hispanic_perc_County\",\n    \"poverty_perc_County\",\n    \"unemployment_County\",\n    \"turnover_perc_County\",\n    \"med_family_income_adj_County\",\n    \"med_gross_rent_adj_County\",\n    \"med_household_income_adj_County\",\n    \"median_value_adj_County\",\n    \"total_population_Tract\",\n    \"housing_units_Tract\",\n    \"occupied_Tract\",\n    \"vacant_Tract\",\n    \"renter_occ_Tract\",\n    \"white_perc_Tract\",\n    \"black_perc_Tract\",\n    \"asian_perc_Tract\",\n    \"hawaiian_perc_Tract\",\n    \"american_alaskan_perc_Tract\",\n    \"two_or_more_perc_Tract\",\n    \"other_perc_Tract\",\n    \"rural_perc_Tract\",\n    \"bachelors_perc_Tract\",\n    \"hispanic_perc_Tract\",\n    \"poverty_perc_Tract\",\n    \"unemployment_Tract\",\n    \"turnover_perc_Tract\",\n    \"med_family_income_adj_Tract\",\n    \"med_gross_rent_adj_Tract\",\n    \"med_household_income_adj_Tract\",\n    \"median_value_adj_Tract\",\n    \"total_population_CBSA\",\n    \"housing_units_CBSA\",\n    \"occupied_CBSA\",\n    \"vacant_CBSA\",\n    \"renter_occ_CBSA\",\n    \"unemployment_CBSA\",\n    \"med_family_income_adj_CBSA\",\n    \"med_gross_rent_adj_CBSA\",\n    \"med_household_income_adj_CBSA\",\n    \"median_value_adj_CBSA\"\n  )\n\n\n# Run anonymization\n# Anonymize Continuous Variables\nsurvey_anon_df &lt;- survey_anon_df %&gt;%\n  dplyr::mutate(\n    dplyr::across(\n      tidyselect::all_of(census_cols_to_anonymize),\n      ~ anon_continuous(.x)\n    )\n  )"
  },
  {
    "objectID": "05-anonymization.html#selecting-columns-for-release-in-final-data",
    "href": "05-anonymization.html#selecting-columns-for-release-in-final-data",
    "title": "Anonymization",
    "section": "Selecting Columns for Release in Final Data",
    "text": "Selecting Columns for Release in Final Data\nWith anonymization complete, we can remove columns with identifiable information and information not relevant to the survey before release.\n\nrelease_cols &lt;-\n  c(\n    \"PrgSrvc_IncrNum\",\n    \"PrgSrvc_DcrsNum\",\n    \"PrgSrvc_Suspend\",\n    \"PrgSrvc_IncrSrvc\",\n    \"PrgSrvc_DcrsSrvc\",\n    \"PrgSrvc_NewOffc\",\n    \"PrgSrvc_ClsdOffc\",\n    \"PrgSrvc_IncrArea\",\n    \"PrgSrvc_DcrsArea\",\n    \"PrgSrvc_IncrFee\",\n    \"PrgSrvc_DcrsFee\",\n    \"PrgSrvc_ShiftOnline\",\n    \"PrgSrvc_AddOnline\",\n    \"PrgSrvc_Oth\",\n    \"PrgSrvc_OthChng_Text\",\n    \"PplSrv_NumServed\",\n    \"PplSrv_NumWait\",\n    \"PplSrv_NumServed_NA_X\",\n    \"PplSrv_NumWait_NA_X\",\n    \"Dmnd_NxtYear\",\n    \"Staff_Fulltime_2021\",\n    \"Staff_Parttime_2021\",\n    \"Staff_Boardmmbr_2021\",\n    \"Staff_RegVlntr_2021\",\n    \"Staff_EpsdVltnr_2021\",\n    \"Staff_AmerVlntr_2021\",\n    \"Staff_PdCnslt_2021\",\n    \"Staff_Other_Text_2021\",\n    \"Staff_Other_Est_2021\",\n    \"Staff_Fulltime_2022\",\n    \"Staff_Parttime_2022\",\n    \"Staff_Boardmmbr_2022\",\n    \"Staff_RegVlntr_2022\",\n    \"Staff_EpsdVltnr_2022\",\n    \"Staff_AmerVlntr_2022\",\n    \"Staff_PdCnslt_2022\",\n    \"Staff_Other_Text_2022\",\n    \"Staff_Other_Est_2022\",\n    \"Staff_Fulltime_NA\",\n    \"Staff_Parttime_NA\",\n    \"Staff_Boardmmbr_NA\",\n    \"Staff_RegVlntr_NA\",\n    \"Staff_EpsdVltnr_NA\",\n    \"Staff_AmerVlntr_NA\",\n    \"Staff_PdCnslt_NA\",\n    \"Staff_Other_Text_NA\",\n    \"Staff_Other_Est_NA\",\n    \"VolImportance\",\n    \"DonImportance\",\n    \"FndRaise_DvlpVirtual\",\n    \"FndRaise_IncrExp\",\n    \"FndRaise_DcrsExp\",\n    \"FndRaise_IncStaff\",\n    \"FndRaise_DcrsStaff\",\n    \"FndRaise_IncrCnslt\",\n    \"FndRaise_DcrsCnslt\",\n    \"FndRaise_IncrVolntr\",\n    \"FndRaise_DcrsVolntr\",\n    \"FndRaise_Othr\",\n    \"FndRaise_Text\",\n    \"FndRaise_MajGift_Amt\",\n    \"FndRaise_Overall_Chng\",\n    \"FndRaise_Cashbelow250_Chng\",\n    \"FndRaise_Cashabove250_Chng\",\n    \"FndRaise_MajGift_Chng\",\n    \"FndRaise_Corp-Found_Grnt_Chng\",\n    \"FndRaise_RstrGift_Chng\",\n    \"FndRaise_UnrstrGift_Chng\",\n    \"FndRaise_DnrBlw250\",\n    \"FndRaise_DnrAbv250\",\n    \"FndRaise_LocGvtGrnt_Seek\",\n    \"FndRaise_StateGvtGrnt_Seek\",\n    \"FndRaise_FedGvtGrnt_Seek\",\n    \"FndRaise_LocGvtCntrct_Seek\",\n    \"FndRaise_StateGvtCntrct_Seek\",\n    \"FndRaise_FedGvtCntrct_Seek\",\n    \"FndRaise_PFGrnt_Seek\",\n    \"FndRaise_CFGrnt_Seek\",\n    \"FndRaise_DAF_Seek\",\n    \"FndRaise_Corp-Found_Grnt_Seek\",\n    \"FndRaise_UntdWy_Seek\",\n    \"FndRaise_CombFedCmpgn_Seek\",\n    \"FndRaise_OthrGvngPrgrm_Seek\",\n    \"FndRaise_LocGvtGrnt_Rcv\",\n    \"FndRaise_StateGvtGrnt_Rcv\",\n    \"FndRaise_FedGvtGrnt_Rcv\",\n    \"FndRaise_LocGvtCntrct_Rcv\",\n    \"FndRaise_StateGvtCntrct_Rcv\",\n    \"FndRaise_FedGvtCntrct_Rcv\",\n    \"FndRaise_PFGrnt_Rcv\",\n    \"FndRaise_CFGrnt_Rcv\",\n    \"FndRaise_DAF_Rcv\",\n    \"FndRaise_Corp-Found_Grnt_Rcv\",\n    \"FndRaise_UntdWy_Rcv\",\n    \"FndRaise_CombFedCmpgn_Rcv\",\n    \"FndRaise_OthrGvngPrgrm_Rcv\",\n    \"Finance_Rev_GovtMain\",\n    \"Finance_Rev_Prtcpnt\",\n    \"Finance_Rev_Govt3rdParty\",\n    \"Finance_Rev_IndvDon\",\n    \"Finance_Rev_Gift\",\n    \"Finance_Rev_Grnt\",\n    \"Finance_Rev_Spnsr\",\n    \"Finance_Rev_Oth\",\n    \"Finance_Rev_Oth_Text\",\n    \"Time_FirstClick_Finances\",\n    \"Time_LastClick_Finances\",\n    \"Time_PageSubmit_Finances\",\n    \"Time_ClickCount_Finances\",\n    \"Reserves_Est\",\n    \"Reserves_NA_X\",\n    \"CARES_Rcv\",\n    \"CARES_Rcv_Est\",\n    \"FinanceChng_Reserves\",\n    \"FinanceChng_Borrow\",\n    \"FinanceChng_DcrsBnft\",\n    \"FinanceChng_IncrBnft\",\n    \"FinanceChng_IncrExp\",\n    \"FinanceChng_DcrsExp\",\n    \"FinanceChng_Oth\",\n    \"FinanceChng_Text\",\n    \"LeadershipChng_RetCEO\",\n    \"LeadershipChng_RsgnCEO\",\n    \"LeadershipChng_TrmnCEO\",\n    \"LeadershipChng_HireCEO\",\n    \"LeadershipChng_IntrmCEO\",\n    \"LeadershipChng_ChngBC\",\n    \"LeadershipChng_LostBoardMem\",\n    \"LeadershipChng_RplcBoardMem\",\n    \"LeadershipChng_AddBoardMem\",\n    \"LeadershipChng_Oth\",\n    \"LeadershipChng_Oth_Text\",\n    \"CEOrace_AAPI\",\n    \"CEOrace_Black\",\n    \"CEOrace_Hisp\",\n    \"CEOrace_NativeAm\",\n    \"CEOrace_White\",\n    \"CEOrace_Oth\",\n    \"CEOrace_Text\",\n    \"CEOgender_Man\",\n    \"CEOgender_Woman\",\n    \"CEOgender_Trans\",\n    \"CEOgender_NB\",\n    \"CEOgender_Oth\",\n    \"CEOgender_specify\",\n    \"BChairrace_AAPI\",\n    \"BChairrace_Black\",\n    \"BChairrace_Hisp\",\n    \"BChairrace_NativeAm\",\n    \"BChairrace_White\",\n    \"BChairrace_Oth\",\n    \"BChairrace_Text\",\n    \"BChairgender_Man\",\n    \"BChairgender_Woman\",\n    \"BChairgender_Trans\",\n    \"BChairgender_NB\",\n    \"BChairgender_Oth\",\n    \"BChairgender_specify\",\n    \"ExtAffairs_GenEd\",\n    \"ExtAffairs_Media\",\n    \"ExtAffairs_Advocacy\",\n    \"ExtAffairs_GovtRs\",\n    \"ExtAffairs_DiscGovtGrnt\",\n    \"ExtAffairs_InfoReq\",\n    \"ExtAffairs_Testify\",\n    \"ExtAffairs_Lobby\",\n    \"ExtAffairs_OrgPrtst\",\n    \"ExtAffairs_Mobilize\",\n    \"ExtAffairs_Petition\",\n    \"ExtAffairs_VoteReg\",\n    \"ExtAffairs_VoteEd\",\n    \"PrimaryConcern\",\n    \"CEOrace_Bi\",\n    \"BChairrace_Bi\",\n    \"State\",\n    \"StateAbbr\",\n    \"County\",\n    \"City\",\n    \"total_population_County\",\n    \"housing_units_County\",\n    \"occupied_County\",\n    \"vacant_County\",\n    \"renter_occ_County\",\n    \"white_perc_County\",\n    \"black_perc_County\",\n    \"asian_perc_County\",\n    \"hawaiian_perc_County\",\n    \"american_alaskan_perc_County\",\n    \"two_or_more_perc_County\",\n    \"other_perc_County\",\n    \"rural_perc_County\",\n    \"bachelors_perc_County\",\n    \"hispanic_perc_County\",\n    \"poverty_perc_County\",\n    \"unemployment_County\",\n    \"turnover_perc_County\",\n    \"med_family_income_adj_County\",\n    \"med_gross_rent_adj_County\",\n    \"med_household_income_adj_County\",\n    \"median_value_adj_County\",\n    \"total_population_Tract\",\n    \"housing_units_Tract\",\n    \"occupied_Tract\",\n    \"vacant_Tract\",\n    \"renter_occ_Tract\",\n    \"white_perc_Tract\",\n    \"black_perc_Tract\",\n    \"asian_perc_Tract\",\n    \"hawaiian_perc_Tract\",\n    \"american_alaskan_perc_Tract\",\n    \"two_or_more_perc_Tract\",\n    \"other_perc_Tract\",\n    \"rural_perc_Tract\",\n    \"bachelors_perc_Tract\",\n    \"hispanic_perc_Tract\",\n    \"poverty_perc_Tract\",\n    \"unemployment_Tract\",\n    \"turnover_perc_Tract\",\n    \"med_family_income_adj_Tract\",\n    \"med_gross_rent_adj_Tract\",\n    \"med_household_income_adj_Tract\",\n    \"median_value_adj_Tract\",\n    \"cbsa_title_CBSA\",\n    \"metro_CBSA\",\n    \"total_population_CBSA\",\n    \"housing_units_CBSA\",\n    \"occupied_CBSA\",\n    \"vacant_CBSA\",\n    \"renter_occ_CBSA\",\n    \"unemployment_CBSA\",\n    \"med_family_income_adj_CBSA\",\n    \"med_gross_rent_adj_CBSA\",\n    \"med_household_income_adj_CBSA\",\n    \"median_value_adj_CBSA\"\n  )\n\nsurvey_release_df &lt;- survey_anon_df %&gt;% \n  dplyr::select(\n    tidyselect::all_of(release_cols)\n  )"
  },
  {
    "objectID": "03-geocoding.html",
    "href": "03-geocoding.html",
    "title": "Geocoding Addresses",
    "section": "",
    "text": "In this section, we’ll parse the addresses from the survey using the postmastr package for geocoding.\nWe first create a row.id column to merge our postmastr results back with the survey dataset.\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(row.id = dplyr::row_number())"
  },
  {
    "objectID": "03-geocoding.html#process-adress-columns-using-postmastr",
    "href": "03-geocoding.html#process-adress-columns-using-postmastr",
    "title": "Geocoding Addresses",
    "section": "Process Adress Columns using Postmastr",
    "text": "Process Adress Columns using Postmastr\nOur survey data set has 3 columns with address information: 1. Addr_ZIP: Postal Codes 2. Addr_CityState : City and State 3. Addr_StreetLocation: Street Names\n\nPostal Codes\n\nProcess Postal Code Column\nWe first explore the postal codes in Addr_ZIP.\n\nsurvey_addr_zipcodes &lt;- survey_recode_df %&gt;% \n  dplyr::select(row.id, Addr_ZIP)\n\npostmastr_zip_id &lt;- postmastr::pm_identify(survey_addr_zipcodes, var = \"Addr_ZIP\")\npostmastr_zip_prep &lt;- postmastr::pm_prep(postmastr_zip_id, var = \"Addr_ZIP\", type = \"zip\")\n\n\nOur postmastr object returns FALSE when asked if all ZIP codes in the survey data set are valid. This requires additional exploration.\n\n\nzip_detect &lt;- postmastr::pm_postal_detect(postmastr_zip_prep) %&gt;% \n  dplyr::filter(pm.hasZip == FALSE)\n\n\npm_postal_detect() reveals that the survey responses without a valid ZIP code have the following values: -99, which indicate missingness. We can thus remove them from our postal code data set.\n\n\nsurvey_addr_zipcodes &lt;- survey_recode_df %&gt;% \n  dplyr::select(row.id, Addr_ZIP) %&gt;% \n  dplyr::filter(! Addr_ZIP %in% c(NA, \"-99\"))\n\npostmastr_zip_id &lt;- postmastr::pm_identify(survey_addr_zipcodes, var = \"Addr_ZIP\")\npostmastr_zip_prep &lt;- postmastr::pm_prep(postmastr_zip_id, var = \"Addr_ZIP\", type = \"zip\")\n\n\nOur postmastr object now returns TRUE when asked if all ZIP codes in the survey data set are valid.\n\n\n\nParsing Zip Codes\nWe can now parse and process all postal codes. After parsing, we left join our results with the original dataset to keep row.ids.\n\npostmastr_zip_parsed &lt;- postmastr::pm_postal_parse(postmastr_zip_prep)\n\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `pm.address = ifelse(...)`.\nCaused by warning in `stri_sub()`:\n! argument is not an atomic vector; coercing\n\nzip_parsed &lt;- postmastr_zip_id %&gt;% \n  tidylog::left_join(postmastr_zip_parsed) %&gt;% \n  dplyr::select(row.id, pm.zip, pm.zip4)\n\nJoining with `by = join_by(pm.uid)`\nleft_join: added 3 columns (pm.address, pm.zip, pm.zip4)\n&gt; rows only in x 0\n&gt; rows only in postmastr_zip_parsed ( 0)\n&gt; matched rows 760\n&gt; =====\n&gt; rows total 760\n\n\n\n\n\nCity and State\nWe can now repeat the process for Addr_CityState.\n\nProcessing Data\n\nstatedict &lt;- postmastr::pm_dictionary(type = \"state\")\n\nsurvey_addr_citystate &lt;- survey_recode_df %&gt;%\n  dplyr::select(row.id, Addr_CityState) %&gt;%\n  dplyr::filter(!Addr_CityState %in% c(NA, \"-99\")) %&gt;%\n  dplyr::mutate(\n    Addr_CityState = gsub(\"\\\\.\", \"\", Addr_CityState),\n    Addr_CityState = gsub(\"Falls ChurchVA 22042\", \"Falls Church, VA\", Addr_CityState),\n    Addr_CityState = gsub(\"Sonoma cA\", \"Sonoma, CA\", Addr_CityState)\n  )\n\npostmastr_citystate_id &lt;- postmastr::pm_identify(survey_addr_citystate, var = \"Addr_CityState\")\npostmastr_citystate_prep &lt;- postmastr::pm_prep(postmastr_citystate_id, var = \"Addr_CityState\", type = \"state\")\n\n\nOur postmastr object now returns FALSE when asked if all states in the Addr_CityState column are valid.\n\nWe next examine the rows without a valid state.\n\npm_state_none(postmastr_citystate_prep)\n\n# A tibble: 291 × 2\n   pm.uid pm.address    \n    &lt;int&gt; &lt;chr&gt;         \n 1      1 Indianapolis  \n 2      2 Willowbrook   \n 3      6 Lincoln       \n 4      8 Lodi          \n 5     10 Largo Fl      \n 6     11 Jeffersonville\n 7     12 Atlanta       \n 8     14 Norfolk       \n 9     15 OSSINING      \n10     20 Miami         \n# ℹ 281 more rows\n\n\nThis data set contains some title case state abbreviations that are undetected. We can append them to our state dictionary. We can then check the unmatched variables to double-check if any states were missed.\n\nstates_append &lt;- postmastr::pm_append(\n  type = \"state\",\n  input = c(\n    \"Fl\",\n    \"North Caroling\",\n    \"Tx\",\n    \"Ca\",\n    \"Falls ChurchVA 22042\",\n    \"GA 30014\",\n    \"NV.\",\n    \"Ky\",\n    \"Ma\",\n    \"CO.\",\n    \"OaklandCA\",\n    \"Mi\",\n    \"cA\",\n    \"Ny\"\n  ),\n  output = c(\n    \"FL\",\n    \"NC\",\n    \"TX\",\n    \"CA\",\n    \"VA\",\n    \"GA\",\n    \"NV\",\n    \"KY\",\n    \"MA\",\n    \"CO\",\n    \"CA\",\n    \"MI\",\n    \"CA\",\n    \"NY\"\n  ),\n  locale = \"us\"\n)\n\nstatedict &lt;- postmastr::pm_dictionary(type = \"state\", append = states_append)\n\npm_state_none(postmastr_citystate_prep, dictionary = statedict)\n\n# A tibble: 278 × 2\n   pm.uid pm.address    \n    &lt;int&gt; &lt;chr&gt;         \n 1      1 Indianapolis  \n 2      2 Willowbrook   \n 3      6 Lincoln       \n 4      8 Lodi          \n 5     11 Jeffersonville\n 6     12 Atlanta       \n 7     14 Norfolk       \n 8     15 OSSINING      \n 9     20 Miami         \n10     22 Portland      \n# ℹ 268 more rows\n\n\n\n\nParsing State Data\nOnce processing is complete, we can parse States from the Addr_CityState column.\n\npostmastr_state_parsed &lt;- postmastr::pm_state_parse(postmastr_citystate_prep,\n                                                    dictionary = statedict)\n\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `pm.address = ifelse(...)`.\nCaused by warning in `stri_sub()`:\n! argument is not an atomic vector; coercing\n\npostmastr_state_parsed\n\n# A tibble: 642 × 3\n   pm.uid pm.address   pm.state\n    &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;   \n 1      1 Indianapolis &lt;NA&gt;    \n 2      2 Willowbrook  &lt;NA&gt;    \n 3      3 Springfield  MA      \n 4      4 Chicago      IL      \n 5      5 Selinsgrove  PA      \n 6      6 Lincoln      &lt;NA&gt;    \n 7      7 Dayton       OH      \n 8      8 Lodi         &lt;NA&gt;    \n 9      9 Harrison     ME      \n10     10 Largo        FL      \n# ℹ 632 more rows\n\n\n\n\nProcessing City Data\nWe repeat the same process for city data. We include a filter for the states identified after parsing with Postmastr.\n\nstates &lt;- unique(postmastr_state_parsed$pm.state)[!is.na(unique(postmastr_state_parsed$pm.state))]\n\ncitydict &lt;- postmastr::pm_dictionary(type = \"city\", filter = states)\n\npm_city_none(postmastr_state_parsed, dictionary = citydict)\n\n# A tibble: 50 × 3\n   pm.uid pm.address     pm.state\n    &lt;int&gt; &lt;chr&gt;          &lt;chr&gt;   \n 1      1 Indianapolis   &lt;NA&gt;    \n 2      5 Selinsgrove    PA      \n 3     25 St Louis       MO      \n 4     32 Westbrookville &lt;NA&gt;    \n 5     55 Honolulu       &lt;NA&gt;    \n 6     75 Dillsburg      &lt;NA&gt;    \n 7     89 AHMEDABAD      &lt;NA&gt;    \n 8     96 Carrolltown    &lt;NA&gt;    \n 9    120 Chestnut Hill  MA      \n10    128 Newfoundland   PA      \n# ℹ 40 more rows\n\n\nAfter processing state names, our postmastr object contains sum unmatched cities. We create an additional city-level dictionary to append to our current city-level dictionary. We coerce valid city names to NA values to let postmastr know that these inputs are valid.\n\ncity_append &lt;- postmastr::pm_append(\n  type = \"city\",\n  input = c(\n    \"Indianapolis\",\n    \"Selinsgrove\",\n    \"Birmingham.\",\n    \"Westbrookville\",\n    \"Honolulu\",\n    \"Dillsburg\",\n    \"Carrolltown\",\n    \"Chestnut Hill\",\n    \"Newfoundland\",\n    \"Mercersburg\",\n    \"Moultonborough\",\n    \"Hanibal\",\n    \"OKC\",\n    \"Saint Clair Shores\",\n    \"Mt Pleasant\",\n    \"Boise\",\n    \"idyllwild\",\n    \"Weehawken\",\n    \"Appleon\",\n    \"Pacoima\",\n    \"SEattle\",\n    \"West Palm beach\",\n    \"Chelmsford\",\n    \"Metuchen\",\n    \"Marietta.\",\n    \"Sewickley\",\n    \"Falls ChurchVA\",\n    \"Trout Run\",\n    \"JUD\",\n    \"OLEMA\",\n    \"Danielson\",\n    \"North Las Vegas\",\n    \"Braintree\",\n    \"Lititz\",\n    \"benesnville\",\n    \"OaklandCA\",\n    \"Phoenixville\",\n    \"Denver\",\n    \"Van Nuys\",\n    \"Jacvksonville\",\n    \"Bronx\",\n    \"Pratts\",\n    \"Baltimore\",\n    \"Sonoma\",\n    \"Williston Pk\",\n    \"Wernersville\",\n    \"St Louis\",\n    \"La Canada Flintridge\",\n    \"Falls Church\"\n  ),\n  output = c(\n    NA,\n    NA,\n    \"Birmingham\",\n    NA,\n    NA,\n    NA,\n    NA,\n    NA,\n    NA,\n    NA,\n    NA,\n    NA,\n    \"Oklahoma City\",\n    NA,\n    \"Mount Pleasant\",\n    NA,\n    \"Idyllwild\",\n    NA,\n    \"Appleton\",\n    NA,\n    \"Seattle\",\n    \"West Palm Beach\",\n    NA,\n    NA,\n    \"Marietta\",\n    \"Sewickley\",\n    \"Falls Church\",\n    NA,\n    \"Jud\",\n    \"Olema\",\n    NA,\n    \"North Las Vegas\",\n    NA,\n    NA,\n    \"Bensenville\",\n    \"Oakland\",\n    NA,\n    NA,\n    NA,\n    NA,\n    \"The Bronx\",\n    \"Pratt\",\n    \"Baltimore\",\n    NA,\n    \"Williston Park\",\n    NA,\n    \"St. Louis\",\n    NA,\n    \"Falls Church\"\n  )\n)\n\ncitydict &lt;-\n  postmastr::pm_dictionary(type = \"city\",\n                           filter = states,\n                           append = city_append)\n\npm_city_none(postmastr_state_parsed, dictionary = citydict)\n\n# A tibble: 5 × 3\n  pm.uid pm.address                pm.state\n   &lt;int&gt; &lt;chr&gt;                     &lt;chr&gt;   \n1     89 AHMEDABAD                 &lt;NA&gt;    \n2    382 Falls ChurchVA 22042      &lt;NA&gt;    \n3    486 Tay Ho Ha Noi             &lt;NA&gt;    \n4    491 Bangalore Karnataka India &lt;NA&gt;    \n5    595 Sonoma cA                 &lt;NA&gt;    \n\n\nThe unmatched cities in our data set are not from the US and will be ignored.\n\npostmastr_citystate_parsed &lt;- postmastr::pm_city_parse(postmastr_state_parsed, dictionary = citydict)\n\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `pm.address = ifelse(...)`.\nCaused by warning in `stri_sub()`:\n! argument is not an atomic vector; coercing\n\ncitystate_parsed &lt;- postmastr_citystate_parsed %&gt;% \n  tidylog::left_join(postmastr_citystate_id) %&gt;% \n  dplyr::select(row.id, pm.city, pm.state)\n\nJoining with `by = join_by(pm.uid)`\nleft_join: added 4 columns (pm.id, pm.type, row.id, Addr_CityState)\n&gt; rows only in x 0\n&gt; rows only in postmastr_citystate_id ( 0)\n&gt; matched rows 765 (includes duplicates)\n&gt; =====\n&gt; rows total 765\n\n\n\n\n\nStreet Names\n\nPrepare Data\nThe final column to process is Addr_StreetLocation which contains street names.\n\nsurvey_addr_street &lt;- survey_recode_df %&gt;% \n  dplyr::select(row.id, Addr_StreetLocation) %&gt;% \n  dplyr::filter(! Addr_StreetLocation %in% c(\"-99\", NA))\n\npostmastr_street_id &lt;- postmastr::pm_identify(survey_addr_street, var = \"Addr_StreetLocation\")\npostmastr_street_prep &lt;- postmastr::pm_prep(postmastr_street_id, var = \"Addr_StreetLocation\", type = \"street\")\n\nhead(postmastr_street_prep, 10)\n\n# A tibble: 10 × 2\n   pm.uid pm.address                   \n    &lt;int&gt; &lt;chr&gt;                        \n 1      1 6130 N Michigan Rd           \n 2      2 6141 Bentley Ave             \n 3      3 38 Oxford Street             \n 4      4 2545 W Diversey Ave Suite 225\n 5      5 429 Eighth Street            \n 6      6 912 N. 70th Street           \n 7      7 409 Troy St                  \n 8      8 275 Poplar Street            \n 9      9 156 Deertrees Rd             \n10     10 12552 Belcher Rd S           \n\n\n\n\nParse House Numbers\nNext, we extract house/unit numbers from the street addresses.\n\npostmastr_house_parsed &lt;- postmastr::pm_house_parse(postmastr_street_prep)\nhead(postmastr_house_parsed, 10)\n\n# A tibble: 10 × 3\n   pm.uid pm.address               pm.house\n    &lt;int&gt; &lt;chr&gt;                    &lt;chr&gt;   \n 1      1 N Michigan Rd            6130    \n 2      2 Bentley Ave              6141    \n 3      3 Oxford Street            38      \n 4      4 W Diversey Ave Suite 225 2545    \n 5      5 Eighth Street            429     \n 6      6 N. 70th Street           912     \n 7      7 Troy St                  409     \n 8      8 Poplar Street            275     \n 9      9 Deertrees Rd             156     \n10     10 Belcher Rd S             12552   \n\n\n\n\nParse Street Prefix and Suffix\nTo parse street prefixes and suffixes requires 2 dictionaries. 1 with directions and 1 with conversions for suffixes like “street” or “boulevard”.\n\ndirs &lt;- pm_dictionary(type = \"directional\", locale = \"us\")\npostmastr_streetdir_parsed &lt;- postmastr::pm_streetDir_parse(postmastr_house_parsed, dictionary = dirs)\npostmastr_streetSuf_parsed &lt;- postmastr::pm_streetSuf_parse(postmastr_streetdir_parsed)\n\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `pm.address = ifelse(...)`.\nCaused by warning in `stri_sub()`:\n! argument is not an atomic vector; coercing\n\n\n\n\nParse Street Names\nThe final element for parsing is the street names themselves.\n\npostmaster_street_parsed &lt;- postmastr::pm_street_parse(postmastr_streetSuf_parsed,\n                                                       ordinal = TRUE,\n                                                       drop = TRUE)\npostmaster_street_parsed\n\n# A tibble: 756 × 6\n   pm.uid pm.house pm.preDir pm.street              pm.streetSuf pm.sufDir\n    &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;                  &lt;chr&gt;        &lt;chr&gt;    \n 1      1 6130     N         Michigan               Rd           &lt;NA&gt;     \n 2      2 6141     &lt;NA&gt;      Bentley                Ave          &lt;NA&gt;     \n 3      3 38       &lt;NA&gt;      Oxford                 St           &lt;NA&gt;     \n 4      4 2545     W         Diversey Ave Suite 225 &lt;NA&gt;         &lt;NA&gt;     \n 5      5 429      &lt;NA&gt;      8th                    St           &lt;NA&gt;     \n 6      6 912      N         70th                   St           &lt;NA&gt;     \n 7      7 409      &lt;NA&gt;      Troy                   St           &lt;NA&gt;     \n 8      8 275      &lt;NA&gt;      Poplar                 St           &lt;NA&gt;     \n 9      9 156      &lt;NA&gt;      Deertrees              Rd           &lt;NA&gt;     \n10     10 12552    &lt;NA&gt;      Belcher                Rd           S        \n# ℹ 746 more rows\n\n\n\n\nCombine Street Components Into Single Column\nAfter parsing each component, we concatenate them into a single street address.\n\npostmastr_street_full_parsed &lt;- postmastr::pm_replace(postmaster_street_parsed, \n                                                      source = postmastr_street_id)\nendQ &lt;- rlang::quo(!! rlang::sym(\"pm.sufDir\"))\n\npostmastr_street_full_parsed &lt;- postmastr::pm_rebuild(postmastr_street_full_parsed, \n                                                      output = \"short\", \n                                                      keep_ids = TRUE)\n\nstreet_parsed &lt;- postmastr_street_full_parsed %&gt;% \n  tidylog::left_join(postmastr_street_id) %&gt;% \n  dplyr::select(row.id, pm.address)\n\nJoining with `by = join_by(pm.id, pm.uid, pm.type, row.id,\nAddr_StreetLocation)`\nleft_join: added no columns\n&gt; rows only in x 0\n&gt; rows only in postmastr_street_id ( 0)\n&gt; matched rows 766\n&gt; =====\n&gt; rows total 766\n\n\n\n\n\nCombine All Parsed Addresses Components Together\nAnd finally, we concatenate our postal code, city, state and street address into a single f_address column for geocoding.\n\npostmastr_faddress_parsed &lt;- street_parsed %&gt;% \n  tidylog::left_join(citystate_parsed) %&gt;% \n  tidylog::left_join(zip_parsed) %&gt;% \n  tidyr::unite(f_address, pm.address, pm.city, pm.state, pm.zip, pm.zip4, na.rm = TRUE, sep = \",\")\n\nJoining with `by = join_by(row.id)`\nleft_join: added 2 columns (pm.city, pm.state)\n&gt; rows only in x 3\n&gt; rows only in citystate_parsed ( 2)\n&gt; matched rows 763\n&gt; =====\n&gt; rows total 766\nJoining with `by = join_by(row.id)`\nleft_join: added 2 columns (pm.zip, pm.zip4)\n&gt; rows only in x 8\n&gt; rows only in zip_parsed ( 2)\n&gt; matched rows 758\n&gt; =====\n&gt; rows total 766\n\nhead(postmastr_faddress_parsed, 20)\n\n# A tibble: 20 × 2\n   row.id f_address                                            \n    &lt;int&gt; &lt;chr&gt;                                                \n 1      2 6130 N Michigan Rd,Indianapolis,46228                \n 2      3 6141 Bentley Ave,Willowbrook,60527                   \n 3      4 38 Oxford St,Springfield,MA,01108                    \n 4      5 2545 W Diversey Ave Suite 225,Chicago,IL,60647       \n 5      6 429 8th St,Selinsgrove,PA,17870                      \n 6      7 912 N 70th St,Lincoln,68505                          \n 7      8 409 Troy St,Dayton,OH,45404                          \n 8      9 275 Poplar St,Lodi,95240                             \n 9     10 156 Deertrees Rd,Harrison,ME,04040                   \n10     11 12552 Belcher Rd S,Largo,FL,33773                    \n11     12 118 E Chestnut Street Po Box 886,Jeffersonville,47130\n12     13 1297 Jonesboro Rd SE,Atlanta,30315                   \n13     14 301 Front St,Key West,FL,33040                       \n14     15 150 St Paul's Blvd. 5th Floor,Norfolk,23510          \n15     16 138 Spring St,OSSINING,10562                         \n16     17 15 Saunders Way #500d,Westbrook,ME,04092             \n17     18 3100 Independence Dr,Birmingham,AL,35209             \n18     19 16173 Baseline Rd,Genoa,IL,60135                     \n19     20 2100 Sherman Ave Suite 300,Cincinnati,OH,45212       \n20     21 2800 Biscayne Blvd Suite 300,Miami,33137             \n\n\nThe f_address column now has parsed addresses that can be formatted using a geocoder of choice. We can now rejoin the parsed address data via row.id from our original data set.\n\nsurvey_geoproc_df &lt;- survey_recode_df %&gt;% \n  tidylog::left_join(postmastr_faddress_parsed, by = \"row.id\")\n\nleft_join: added one column (f_address)\n           &gt; rows only in x                           56\n           &gt; rows only in postmastr_faddress_parsed (  0)\n           &gt; matched rows                            766\n           &gt;                                        =====\n           &gt; rows total                              822"
  },
  {
    "objectID": "03-geocoding.html#geocoding",
    "href": "03-geocoding.html#geocoding",
    "title": "Geocoding Addresses",
    "section": "Geocoding",
    "text": "Geocoding\n\nPassing Parsed Addresses to Geocoder\nThis parsed data set can be submitted to the geocoder of choice. In this case, the survey was processed using the Urban Institue’s Internal Geocoder.\n\n\nReading Geocoder Outputs\nThe outputs from the geocoding process are presented below.\n\n\n# A tibble: 766 × 61\n   row.id f_address  Match_addr Longitude Latitude Addr_type Score Status Region\n    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; \n 1      2 6130 N Mi… 6130 N Mi…     -86.2     39.9 StreetAd…   100 M      India…\n 2      3 6141 Bent… 6141 Bent…     -88.0     41.8 PointAdd…   100 M      Illin…\n 3      4 38 Oxford… 38 Oxford…     -72.6     42.1 PointAdd…   100 M      Massa…\n 4      5 2545 W Di… 2545 W Di…     -87.7     41.9 Subaddre…   100 M      Illin…\n 5      6 429 8th S… 429 8th S…     -76.9     40.8 PointAdd…   100 M      Penns…\n 6      7 912 N 70t… 912 N 70t…     -96.6     40.8 StreetAd…   100 M      Nebra…\n 7      8 409 Troy … 409 Troy …     -84.2     39.8 PointAdd…   100 M      Ohio  \n 8      9 275 Popla… 275 Popla…    -121.      38.1 StreetAd…   100 M      Calif…\n 9     10 156 Deert… 156 Deert…     -70.7     44.1 PointAdd…   100 M      Maine \n10     11 12552 Bel… 12552 Bel…     -82.7     27.9 PointAdd…   100 M      Flori…\n# ℹ 756 more rows\n# ℹ 52 more variables: RegionAbbr &lt;chr&gt;, Subregion &lt;chr&gt;, MetroArea &lt;chr&gt;,\n#   City &lt;chr&gt;, Nbrhd &lt;chr&gt;, geometry &lt;chr&gt;, Match_type &lt;chr&gt;, LongLabel &lt;chr&gt;,\n#   ShortLabel &lt;chr&gt;, Type &lt;chr&gt;, PlaceName &lt;chr&gt;, Place_addr &lt;chr&gt;,\n#   Phone &lt;chr&gt;, URL &lt;lgl&gt;, Rank &lt;dbl&gt;, AddBldg &lt;lgl&gt;, AddNum &lt;chr&gt;,\n#   AddNumFrom &lt;dbl&gt;, AddNumTo &lt;dbl&gt;, AddRange &lt;chr&gt;, Side &lt;chr&gt;,\n#   StPreDir &lt;chr&gt;, StPreType &lt;chr&gt;, StName &lt;chr&gt;, StType &lt;chr&gt;, StDir &lt;chr&gt;, …\n\n\nWe do not need all geographic information returned from the geocoder. The variables of interest are listed in the table below.\n\n\n\nVariable\nDescription\n\n\n\n\nrow.id\nRow number from original data set for merging\n\n\nRegion\nState name\n\n\nRegionAbbr\nState abbreviation\n\n\nSubregion\nCounty name\n\n\nCity\nCity name\n\n\nLatitude\n10-digit Latitude\n\n\nLongitude\n10-digit Longitude\n\n\n\nWe can also pre-emptively drop geographic variables with personally identifiable information such as the postalcode and street address.\n\n# Define geocoded variables of interest\ngeocode_cols &lt;- c(\n  \"row.id\",\n  \"Region\",\n  \"RegionAbbr\",\n  \"Subregion\",\n  \"City\",\n  \"Latitude\",\n  \"Longitude\"\n)\n\n# Subset the geocoded data set\npostmastr_geocoded_subset &lt;- postmastr_geocoded %&gt;% \n  dplyr::select(\n    tidyselect::all_of(geocode_cols)\n  )\n\n# Merge those results via row.id with the processed survey data\nsurvey_geocoded_df &lt;- survey_recode_df %&gt;% \n  tidylog::left_join(postmastr_geocoded_subset,\n                     by = \"row.id\")\n\nleft_join: added 6 columns (Region, RegionAbbr, Subregion, City, Latitude, …)\n           &gt; rows only in x                           56\n           &gt; rows only in postmastr_geocoded_subset (  0)\n           &gt; matched rows                            766\n           &gt;                                        =====\n           &gt; rows total                              822\n\n# Define geographic variables to exclude from processed data set\ngeo_cols_to_exclude &lt;- c(\n  \"address\",\n  \"city\",\n  \"state\",\n  \"zip5\",\n  \"zipcode\",\n  \"Addr_StreetLocation\",\n  \"Addr_CityState\",\n  \"Addr_ZIP\",\n  \"row.id\"\n)\n\n# Exclude Columns and Rename Existing Geographic Columns\nsurvey_geocoded_df &lt;- survey_geocoded_df %&gt;% \n  dplyr::select(\n    ! tidyselect::all_of(geo_cols_to_exclude)\n  ) %&gt;% \n  dplyr::rename(\n    \"State\" = \"Region\",\n    \"StateAbbr\" = \"RegionAbbr\",\n    \"County\" = \"Subregion\"\n  )\n\n\n\nSaving Geocoded Outputs\nWe can now write these outputs to disk and move on to the next chapter, where we add census level metadata to our survey responses.\n\nsetwd(\"Y:/CNP/Generosity Commission/\")\nreadr::write_csv(\n  survey_geocoded_df,\n  \"DATA-PREP/02-data-intermediate/02-wave-two/wave-02-data-intermediate-geocoded.csv\"\n)"
  },
  {
    "objectID": "02-data-cleaning.html",
    "href": "02-data-cleaning.html",
    "title": "Cleaning the Survey Data",
    "section": "",
    "text": "In this chapter we process the raw survey data by:"
  },
  {
    "objectID": "02-data-cleaning.html#renaming-columns",
    "href": "02-data-cleaning.html#renaming-columns",
    "title": "Cleaning the Survey Data",
    "section": "Renaming Columns",
    "text": "Renaming Columns\nColumns referencing survey questions are renamed with the help of a data dictionary to improve readability.\n\ntorename &lt;- dd %&gt;% \n  dplyr::select(vname, vname_raw) %&gt;% \n  tidyr::drop_na()\n\nsurvey_df &lt;- raw_survey_df %&gt;% \n  dplyr::rename_at(vars(torename$vname_raw), ~torename$vname)"
  },
  {
    "objectID": "02-data-cleaning.html#recoding-survey-responses",
    "href": "02-data-cleaning.html#recoding-survey-responses",
    "title": "Cleaning the Survey Data",
    "section": "Recoding Survey Responses",
    "text": "Recoding Survey Responses\nThe next step is recoding survey responses. Each group of survey questions comes with its own set of valid inputs that must be recoded separately. For example, “N/A”’s are options for some survey questions and not for others, and some survey questions allow for manual text inputs.\nThe below code chunk separates all survey questions into their respective categories before further separating each category into numeric, text or NA inputs.\nNA questions here refer to “Check here if not applicable to your organization” questions in the survey, where a “C” indicates that the respondent has checked the N/A box.\n\n# Function to get survey questions by group and data type from data dictionary\nget_survey_questions &lt;- function(data_dict, qgroup, qtype){\n  qns &lt;- data_dict %&gt;% \n    dplyr::filter(group == qgroup,\n                  type == qtype) %&gt;% \n    dplyr::pull(\"vname\")\n  return(qns)\n}\n\n\n# Changes to Programs and Services\nprogram_change_qns_bool &lt;- get_survey_questions(dd, \"ProgChanges\", \"boolean\")\nprogram_change_qns_txt &lt;- get_survey_questions(dd, \"ProgChanges\", \"text\")\n\n# People Served\npeople_served_qns_int &lt;- get_survey_questions(dd, \"PeopleServed#1\", \"integer\")\npeople_served_qns_bool &lt;- get_survey_questions(dd, \"PeopleServed#2\", \"boolean\")\n\n# Demand for future programs and services\ndemand_fct_qns &lt;- get_survey_questions(dd, \"Demand\", \"factor\") \n\n# Staff and Volunteers\nstaff_qns_int &lt;- c(\n  get_survey_questions(dd, \"Staff#1\", \"integer\"),\n  get_survey_questions(dd, \"Staff#2\", \"integer\")\n)\nstaff_qns_bool &lt;- get_survey_questions(dd, \"Staff#3\", \"boolean\")\nstaff_qns_text &lt;- c(\n  get_survey_questions(dd, \"Staff#1\", \"text\"),\n  get_survey_questions(dd, \"Staff#2\", \"text\"),\n  get_survey_questions(dd, \"Staff#3\", \"text\")\n)\n\n# Importance of Volunteers and Donors\nvolimportance_qns_fct &lt;- get_survey_questions(dd, \"VolImportance\", \"factor\")\ndonimportance_qns_fct &lt;- get_survey_questions(dd, \"DonImportance\", \"factor\")\n\n# Fundraising\nfundraise_qns_bool &lt;- get_survey_questions(dd, \"FRchanges\", \"boolean\")\nfundraise_qns_text &lt;- get_survey_questions(dd, \"FRchanges\", \"text\")\n\n# Amount for major gifts\nmajorgift_qn_num &lt;- get_survey_questions(dd, \"Frmajgift\", \"numeric\")\n\n# Fundraising Changes\nfundraise_change_qns_fct &lt;- get_survey_questions(dd, \"FRchanges#1\", \"factor\")\n\n# Number of donors\nfundraise_donor_qns_int &lt;- get_survey_questions(dd, \"FRnumberdonors\", \"integer\")\n\n# Fundraising Sought and Received\nfundraise_skrcv_qns_bool &lt;- c(\n  get_survey_questions(dd, \"Funding1#1\", \"boolean\"),\n  get_survey_questions(dd, \"Funding1#2\", \"boolean\")\n)\n\n# Revenue breakdown\nfinance_revenue_qns_num &lt;- get_survey_questions(dd, \"Finances\", \"numeric\")\nfinance_revenue_qns_text &lt;- get_survey_questions(dd, \"Finances\", \"text\")\n\n# Financial reserves\nreserve_qns_num &lt;- get_survey_questions(dd, \"Reserves\", \"numeric\")\nreserve_qns_bool &lt;- get_survey_questions(dd, \"Reserves\", \"boolean\")\n\n# CARES Funding\ncares_qns_num &lt;- get_survey_questions(dd, \"CARES\", \"numeric\")\ncares_qns_bool &lt;- get_survey_questions(dd, \"CARES\", \"boolean\")\n\n# Changes to finances\nfinance_chng_qns_bool &lt;- get_survey_questions(dd, \"FinanceChanges\", \"boolean\")\nfinance_chng_qns_text &lt;- get_survey_questions(dd, \"FinanceChanges\", \"text\")\n\n# Leadership Changes\nleadership_chng_qns_bool &lt;- get_survey_questions(dd, \"LeadershipChanges\", \"boolean\")\nleadership_chng_qns_text &lt;- get_survey_questions(dd, \"LeadershipChanges\", \"text\")\n\n# Race and Gender Qns\nrace_gender_qns_bool &lt;- c(\n  get_survey_questions(dd, \"CEOrace\", \"boolean\"),\n  get_survey_questions(dd, \"CEOgender\", \"boolean\"),\n  get_survey_questions(dd, \"BCrace\", \"boolean\"),\n  get_survey_questions(dd, \"BCgender\", \"boolean\")\n)\n\nrace_gender_qns_text &lt;- c(\n  get_survey_questions(dd, \"CEOrace\", \"text\"),\n  get_survey_questions(dd, \"CEOgender\", \"text\"),\n  get_survey_questions(dd, \"BCrace\", \"text\"),\n  get_survey_questions(dd, \"BCgender\", \"text\")\n)\n\n# External affairs questions\nextaffairs_qns_fct &lt;- get_survey_questions(dd, \"ExternalAffairs\", \"factor\")\n# Primary concern question\nprimary_cncrn_qn_text &lt;- get_survey_questions(dd, \"PrimaryConcern\", \"text\") \n\n\nSurvey Variable Breakdown\n\n\n15 questions about changes to programs and services\n4 questions about the number of people each organization serves\n1 question about overall program demand\n27 questions about staff numbers\n2 questions about donor and volunteer importance\n11 questions about changes to leadership\n26 questions about the race and gender of CEOs and Board Chairs.\n8 questions about changes to organizational finances\n2 questions about CARES Funding\n2 questions about financial reserves\n9 questions about revenue sources\n26 questions about fundraising sources\n2 questions about donor types in fundraising\n7 questions about fundraising changes\n1 questions about major gift amounts\n1 questions about future concerns\n\n\n\n\nRecode and Relabel Variables\nThere are several factor and boolean variables in this survey data set with inconsistent coding. We will recode each category of question individually and document our decision criteria.\nUsing the memisc package, different types of missingness (e.g. Unsure, N/A, -99 etc.) are coded as missing.\n\n# Function to convert survey variable to survey.item with missingness and variable labels\ncreate_survey_item &lt;- function(survey_data, qns, recode_vals, recode_labs, missing_vals){\n  survey_data &lt;- survey_data |&gt;\n    purrr::modify_at(\n      .at = qns,\n      .f = memisc::as.item,\n      labels = structure(\n        .Data = recode_vals,\n        names = recode_labs\n      ),\n      missing.values = missing_vals\n    )\n  return(survey_data)\n}\n\n\nYes/No Questions\n\n\n\nOriginal Value\nDescription\nRecode Value\nMissing ?\n\n\n\n\nYes\nYes\n1\nNo\n\n\nNo\nNo\n0\nNo\n\n\nUnsure\nUnsure\n97\nYes\n\n\nN/A\nNot Applicable\n98\nYes\n\n\n-99\nIncomplete\n99\nYes\n\n\nNA\nUnanswered\nNA\nYes\n\n\n\n\nbool_qns &lt;- c(program_change_qns_bool, fundraise_qns_bool, cares_qns_bool, finance_chng_qns_bool, leadership_chng_qns_bool)\n\nsurvey_recode_df &lt;- survey_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(bool_qns),\n      ~ dplyr::case_match(.,\n                          \"Yes\" ~ 1, \"No\" ~ 0, \"Unsure\" ~ 97, \"N/A\" ~ 98, \"-99\" ~ 99,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  bool_qns, \n  recode_vals = c(0, 1, 97, 98, 99), \n  recode_labs = c(\"No\", \"Yes\", \"Unsure\", \"Not Applicable\", \"N/A\"), \n  missing_vals = c(97, 98, 99)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(bool_qns[1])\n    )\n)\n\n================================================================================\n\n   PrgSrvc_IncrNum\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 97, 98, 99\n\n   Values and labels         N Valid Total\n                                          \n    0   'No'               305  40.6  37.1\n    1   'Yes'              446  59.4  54.3\n   97 M 'Unsure'             1         0.1\n   98 M 'Not Applicable'     7         0.9\n   99 M 'N/A'               11         1.3\n   NA M                     52         6.3\n\n\n\n\nSingle Checkboxes\nThese questions are presented as a checkbox to the respondent. They indicate an affirmative answer to the question.\n\nSeek or Receive Fundraising Questions\nThese checkboxes are ticked by the respondent to indicate if they have sought or received funding from a specific source.\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\n(select all that apply)\nCheckbox Checked\nYes\n1\nNo\n\n\n-99\nCheckbox Unchecked\nNo\n0\nNo\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(fundraise_skrcv_qns_bool),\n      ~ dplyr::case_match(.,\n                          \"(select all that apply)\" ~ 1, \"-99\" ~ 0,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  fundraise_skrcv_qns_bool, \n  recode_vals = c(0, 1), \n  recode_labs = c(\"No\", \"Yes\"), \n  missing_vals = c()\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(fundraise_skrcv_qns_bool[1])\n    )\n)\n\n================================================================================\n\n   FndRaise_LocGvtGrnt_Seek\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n\n   Values and labels     N Valid Total\n                                      \n    0   'No'           317  46.8  38.6\n    1   'Yes'          361  53.2  43.9\n   NA M                144        17.5\n\n\n\n\nRace and Gender Checkboxes\nThese checkboxes are ticked by the respondent to indicate if their CEO or board chair belong to a specified race or gender identity.\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nAsian/Pacific Islander\nCheckbox Checked\nYes\n1\nNo\n\n\nBlack/African American\nCheckbox Checked\nYes\n1\nNo\n\n\nLatinx/Hispanic\nCheckbox Checked\nYes\n1\nNo\n\n\nNative American/American Indian\nCheckbox Checked\nYes\n1\nNo\n\n\nWhite\nCheckbox Checked\nYes\n1\nNo\n\n\nMan\nCheckbox Checked\nYes\n1\nNo\n\n\nWoman\nCheckbox Checked\nYes\n1\nNo\n\n\nTrans\nCheckbox Checked\nYes\n1\nNo\n\n\nGender non-conforming/Non-Binary\nCheckbox Checked\nYes\n1\nNo\n\n\nOther (please specify)\nCheckbox Checked\nYes\n1\nNo\n\n\n0\nCheckbox Unchecked\nNo\n0\nNo\n\n\n-99\nIncomplete\nIncomplete\n99\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(race_gender_qns_bool),\n      ~ dplyr::case_match(.,\n                          \"Asian/Pacific Islander\" ~ 1,\n                          \"Black/African American\" ~ 1,\n                          \"Latinx/Hispanic\" ~ 1,\n                          \"Native American/American Indian\" ~ 1,\n                          \"White\" ~ 1,\n                          \"Man\" ~ 1,\n                          \"Woman\" ~ 1,\n                          \"Trans\" ~ 1,\n                          \"Gender non-conforming/Non-Binary\" ~ 1,\n                          \"Other (please specify):\" ~ 1,\n                          \"-99\" ~ 99,\n                          \"0\" ~ 0,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  race_gender_qns_bool, \n  recode_vals = c(0, 1, 99), \n  recode_labs = c(\"No\", \"Yes\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(race_gender_qns_bool[1])\n    )\n)\n\n================================================================================\n\n   CEOrace_AAPI\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99\n\n   Values and labels     N Valid Total\n                                      \n    0   'No'            48  98.0   5.8\n    1   'Yes'            1   2.0   0.1\n   99 M 'Incomplete'     2         0.2\n   NA M                771        93.8\n\n\n\n\n\nN/A Checkboxes\nThese questions are presented as a checkbox to the user to indicate that a question is not applicable. “Yes” here means “Yes, this question is not applicable”.\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nC\nYes, this question is not applicable\nYes\n1\nNo\n\n\nN/A\nYes, this question is not applicable\nYes\n1\nNo\n\n\n-99\nIncomplete\nNo\n0\nNo\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nna_bool_qns &lt;- c(staff_qns_bool, reserve_qns_bool, people_served_qns_bool)\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(na_bool_qns),\n      ~ dplyr::case_match(.,\n                          \"C\" ~ 1, \"-99\" ~ 0, \"N/A\" ~ 1,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  na_bool_qns, \n  recode_vals = c(0, 1), \n  recode_labs = c(\"No\", \"Yes\"), \n  missing_vals = c()\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(na_bool_qns[1])\n    )\n)\n\n================================================================================\n\n   Staff_Fulltime_NA\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n\n   Values and labels     N Valid Total\n                                      \n    0   'No'           666  92.2  81.0\n    1   'Yes'           56   7.8   6.8\n   NA M                100        12.2\n\n\n\n\nMulti-selection Inputs\nThese questions offer the user with multiple options to select one from. Since the options are ordered categories, they are coded on an ordinal scale.\n\nIncrease - Decrease Questions\nThere 2 questions that ask respondents to define changes via an increase or decrease relative to previous years. They are recoded on an ordinal scale.\n\nChanges in Demand Questions\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nIncrease\nIncrease\nIncrease\n2\nNo\n\n\nStay the same\nStay the same\nUnchanged\n1\nNo\n\n\nDecrease\nDecrease\nDecrease\n0\nNo\n\n\n-99\nIncomplete\nNo\n99\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(demand_fct_qns),\n      ~ dplyr::case_match(.,\n                          \"Increase\" ~ 2, \"Stay the same\" ~ 1, \"Decrease\" ~ 0, \"-99\" ~ 99,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  demand_fct_qns, \n  recode_vals = c(2, 1, 0, 99), \n  recode_labs = c(\"Increase\", \"Unchanged\", \"Decrease\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(demand_fct_qns[1])\n    )\n)\n\n================================================================================\n\n   Dmnd_NxtYear\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99\n\n   Values and labels     N Valid Total\n                                      \n    0   'Decrease'      19   2.6   2.3\n    1   'Unchanged'    154  21.3  18.7\n    2   'Increase'     551  76.1  67.0\n   99 M 'Incomplete'    10         1.2\n   NA M                 88        10.7\n\n\n\n\nChanges in Fundraising Questions\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nIncreased significantly (by more than 10%)\nLargest Increase\nIncrease Significantly\n5\nNo\n\n\nIncreased moderately (by less than 10%)\nSecond Largest Increase\nIncrease Moderately\n4\nNo\n\n\nStayed more or less the same\nThird Largest Increase\nUnchanged\n3\nNo\n\n\nDecreased moderately (by less than 10%)\nFourth Largest Increase\nDecrease Moderately\n2\nNo\n\n\nDecreased significantly (by more than 10%)\nFifth Largest Increase\nDecrease Significantly\n1\nNo\n\n\nUnsure\nUnsure\nUnsure\n99\nMissing\n\n\n-99\nIncomplete\nIncomplete\n98\nYes\n\n\nN/A\nNot Applicable\nNot Applicable\n97\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(fundraise_change_qns_fct),\n      ~ dplyr::case_match(.,\n                          \"Increased significantly (by more than 10%)\" ~ 5,\n                          \"Increased moderately (by less than 10%)\" ~ 4,\n                          \"Stayed more or less the same\" ~ 3,\n                          \"Decreased moderately (by less than 10%)\" ~ 2,\n                          \"Decreased significantly (by more than 10%)\" ~ 1,\n                          \"Unsure\" ~ 99,\n                          \"-99\" ~ 98,\n                          \"N/A\" ~ 97,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  fundraise_change_qns_fct, \n  recode_vals = c(5, 4, 3, 2, 1, 0, 99, 98, 97), \n  recode_labs = c(\"Increase Significantly\", \"Increase Moderately\", \"Unchanged\", \"Decrease Moderately\", \"Decrease Significantly\", \"Unsure\", \"Incomplete\", \"Not Applicable\"), \n  missing_vals = c(99, 98, 97)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(fundraise_change_qns_fct[1])\n    )\n)\n\n================================================================================\n\n   FndRaise_Overall_Chng\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99, 98, 97\n\n   Values and labels                 N Valid Total\n                                                  \n    0   'Unsure'                     0   0.0   0.0\n    1   'Decrease Significantly'    80  12.9   9.7\n    2   'Decrease Moderately'       77  12.4   9.4\n    3   'Unchanged'                161  26.0  19.6\n    4   'Increase Moderately'      169  27.3  20.6\n    5   'Increase Significantly'   133  21.5  16.2\n   97 M 'NA'                         2         0.2\n   98 M 'Not Applicable'            33         4.0\n   99 M 'Incomplete'                12         1.5\n   NA M                            155        18.9\n\n\ndplyr::across(\n  tidyselect::all_of(fundraise_change_qns),\n  ~ dplyr::recode_factor(.,\n                      \"Increased significantly (by more than 10%)\" = 1,\n                      \"Increased moderately (by less than 10%)\" = 2,\n                      \"Stayed more or less the same\" = 3,\n                      \"Decreased moderately (by less than 10%)\" = 4,\n                      \"Decreased significantly (by more than 10%)\" = 5,\n                      \"Unsure\" = 99,\n                      \"-99\" = -99,\n                      \"N/A\" = 1)    \n)\n\n\n\nLevel of Importance Questions\nThere are 2 questions that ask respondents to rank the importance of volunteers and donors respectively. However, both sets of options’ are not identical. Hence, they are recoded to common values for reproducibility.\n\nVolunteer Importance\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nEssential - we depend entirely on volunteers to carry out our mission and goals\nMaximum Importance\nEssential\n5\nNo\n\n\nVery important - we depend on volunteers for a wide range of tasks, but not all\nSecond Most Important\nVery Important\n4\nNo\n\n\nSomewhat important - we depend on volunteers for several key tasks\nThird Most Important\nSomewhat Important\n3\nNo\n\n\nNot very important - we depend on volunteers for only non-essential tasks\nFourth Most Important\nNot Very Important\n2\nNo\n\n\nNot at all important - we could carry out our mission and goals without using volunteers\nFifth Most Important\nNot At All Important\n1\nNo\n\n\nWe do not use volunteers\nSixth Most Important\nNot Used\n0\nNo\n\n\n-99\nIncomplete\nIncomplete\n99\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(volimportance_qns_fct),\n      ~ dplyr::case_match(.,\n                          \"Essential - we depend entirely on volunteers to carry out our mission and goals\" ~ 5,\n                          \"Very important - we depend on volunteers for a wide range of tasks, but not all\" ~ 4,\n                          \"Somewhat important - we depend on volunteers for several key tasks\" ~ 3,\n                          \"Not very important - we depend on volunteers for only non-essential tasks\" ~ 2,\n                          \"Not at all important - we could carry out our mission and goals without using volunteers\" ~ 1,\n                          \"We do not use volunteers\" ~ 0,\n                          \"-99\" ~ 99,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df,\n  volimportance_qns_fct, \n  recode_vals = c(5, 4, 3, 2, 1, 0, 99), \n  recode_labs = c(\"Essential\", \"Very Important\", \"Somewhat Important\", \"Not Very Important\", \"Not At All Important\", \"Not Used\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(volimportance_qns_fct[1])\n    )\n)\n\n================================================================================\n\n   VolImportance\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99\n\n   Values and labels               N Valid Total\n                                                \n    0   'Not Used'                46   6.4   5.6\n    1   'Not At All Important'    41   5.7   5.0\n    2   'Not Very Important'      80  11.2   9.7\n    3   'Somewhat Important'     196  27.5  23.8\n    4   'Very Important'         209  29.3  25.4\n    5   'Essential'              142  19.9  17.3\n   99 M 'Incomplete'               6         0.7\n   NA M                          102        12.4\n\n\n\n\nDonor Importance\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nEssential, we depend entirely on individual donations to carry out our mission and goals\nMaximum Importance\nEssential\n5\nNo\n\n\nVery important, we depend on individual donations for a wide range of activities, but not all\nVery Important\n4\nNo\n\n\n\nImportant, we depend on individual donations for several key activities\nThird Most Important\nSomewhat Important\n3\nNo\n\n\nNot very important, we depend on individual donations for only non-essential activities\nFourth Most Important\nNot Very Important\n2\nNo\n\n\nNot at all important, we could carry out our mission and goals without donations from individuals\nFifth Most Important\nNot At All Important\n1\nNo\n\n\nWe do not receive donations from individuals\nSixth Most Important\nNot Used\n0\nNo\n\n\n-99\nIncomplete\nIncomplete\n99\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(donimportance_qns_fct),\n      ~ dplyr::case_match(.,\n                          \"Essential, we depend entirely on individual donations to carry out our mission and goals\" ~ 5,\n                          \"Very important, we depend on individual donations for a wide range of activities, but not all\" ~ 4,\n                          \"Important, we depend on individual donations for several key activities\" ~ 3,\n                          \"Not very important, we depend on individual donations for only non-essential activities\" ~ 2,\n                          \"Not at all important, we could carry out our mission and goals without donations from individuals\" ~ 1,\n                          \"We do not receive donations from individuals\" ~ 0,\n                          \"-99\" ~ 99,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df,\n  donimportance_qns_fct, \n  recode_vals = c(5, 4, 3, 2, 1, 0, 99), \n  recode_labs = c(\"Essential\", \"Very Important\", \"Somewhat Important\", \"Not Very Important\", \"Not At All Important\", \"Not Used\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(donimportance_qns_fct[1])\n    )\n)\n\n================================================================================\n\n   DonImportance\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99\n\n   Values and labels               N Valid Total\n                                                \n    0   'Not Used'                18   2.5   2.2\n    1   'Not At All Important'    24   3.4   2.9\n    2   'Not Very Important'      59   8.3   7.2\n    3   'Somewhat Important'     137  19.3  16.7\n    4   'Very Important'         298  41.9  36.3\n    5   'Essential'              175  24.6  21.3\n   99 M 'Incomplete'               7         0.9\n   NA M                          104        12.7\n\n\n\n\n\nFrequency Questions\nThese questions ask respondents to rank the frequency at which they engage in an activity.\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nFrequently\nMost Frequent\nFrequently\n4\nNo\n\n\nAlmost all the time\nSecond Most Frequent\nMore Often Than Not\n3\nNo\n\n\nOccasionally\nThird Most Frequent\nOccasionally\n2\nNo\n\n\nRarely\nFourth Most Frequent\nRarely\n1\nNo\n\n\nNever\nFifth Most Frequent\nOccasionally\n0\nNo\n\n\n-99\nIncomplete\nIncomplete\n99\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(extaffairs_qns_fct),\n      ~ dplyr::case_match(.,\n                          \"Frequently\" ~ 4,\n                          \"Almost all the time\" ~ 3,\n                          \"Occasionally\" ~ 2,\n                          \"Rarely\" ~ 1,\n                          \"Never\" ~ 0,\n                          \"-99\" ~ 99,\n                          .default = NA)\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df,\n  extaffairs_qns_fct, \n  recode_vals = c(4, 3, 2, 1, 0, 99), \n  recode_labs = c(\"Frequently\", \"More Often than Not\", \"Occasionally\", \"Rarely\", \"Never\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(extaffairs_qns_fct[1])\n    )\n)\n\n================================================================================\n\n   ExtAffairs_GenEd\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99\n\n   Values and labels              N Valid Total\n                                               \n    0   'Never'                 167  29.0  20.3\n    1   'Rarely'                 98  17.0  11.9\n    2   'Occasionally'          149  25.9  18.1\n    3   'More Often than Not'    45   7.8   5.5\n    4   'Frequently'            116  20.2  14.1\n   99 M 'Incomplete'             10         1.2\n   NA M                         237        28.8\n\n\n\n\n\nInteger Inputs\nThese questions accept an integer input from users to indicate the number of staff they have, people they served, or donors they have.\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nWhole Number\nNumber of Staff, People or Donors\nNA\nInteger Value\nNo\n\n\nN/A\nNot Applicable\nNA\n-1\nYes\n\n\n-99\nIncomplete\nNA\n-2\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nint_qns &lt;- c(staff_qns_int, people_served_qns_int, fundraise_donor_qns_int)\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(int_qns),\n      ~ dplyr::case_match(.,\n                          \"N/A\" ~ -1,\"-99\" ~ -2, NA ~ NA,\n                          .default = as.integer(.))\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df,\n  int_qns, \n  recode_vals = c(), \n  recode_labs = c(), \n  missing_vals = c(-1, -2)\n)\n\nWarning in structure(.Data = recode_vals, names = recode_labs): Calling 'structure(NULL, *)' is deprecated, as NULL cannot have attributes.\n  Consider 'structure(list(), *)' instead.\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(int_qns[1])\n    )\n)\n\n================================================================================\n\n   Staff_Fulltime_2021\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: interval\n   Missing values: -1, -2\n\n   Values                  N Percent\n                                    \n      M (unlab.mss.)      67     8.2\n   NA M                  100    12.2\n                                    \n        Min:    0.000               \n        Max: 3000.000               \n       Mean:   16.783               \n   Std.Dev.:  120.028               \n\n\n\n\nNumeric Inputs\nThese questions accept a numeric input from users to denote dollar values. For some variables, additional processing is done to remove commas and “$” signs.\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\nDollar Amount\nDollar Amount\nNA\nNumeric Value\nNo\n\n\n-99\nIncomplete\nNA\n-1\nYes\n\n\nNA\nUnanswered\nNA\nNA\nYes\n\n\n\n\nnumeric_qns &lt;- c(majorgift_qn_num, reserve_qns_num, cares_qns_num, finance_revenue_qns_num)\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;%\n  dplyr::mutate(\n    CARES_Rcv_Est = stringr::str_replace_all(CARES_Rcv_Est, \",\", \"\"),\n    CARES_Rcv_Est = stringr::str_replace_all(CARES_Rcv_Est, \" \", \"\"),\n    CARES_Rcv_Est = stringr::str_replace(CARES_Rcv_Est, \"\\\\$\", \"\")\n  ) %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(numeric_qns),\n      ~ dplyr::case_match(.,\n                          \"-99\" ~ -1,\n                          .default = as.numeric(.))\n    )\n  )\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df,\n  numeric_qns, \n  recode_vals = c(), \n  recode_labs = c(), \n  missing_vals = c(-1)\n)\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(numeric_qns[1])\n    )\n)\n\n================================================================================\n\n   FndRaise_MajGift_Amt\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: interval\n   Missing values: -1\n\n   Values                  N Percent\n                                    \n      M (unlab.mss.)      18     2.2\n   NA M                  156    19.0\n                                    \n        Min:       0.010            \n        Max: 1000000.000            \n       Mean:    5935.894            \n   Std.Dev.:   44801.714            \n\n\n\n\nText Inputs\nThese questions allow the user to enter raw text as answers. All non-text values are converted to NAs.\n\ntext_qns &lt;- c(staff_qns_text, finance_chng_qns_text, finance_revenue_qns_text, fundraise_qns_text, leadership_chng_qns_text, primary_cncrn_qn_text, program_change_qns_txt, race_gender_qns_text)\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    dplyr::across(\n      .cols = tidyselect::all_of(text_qns),\n      ~ dplyr::case_match(.,\n                          \"-99\" ~ NA, NA ~ NA,\n                          .default = as.character(.))\n    )\n  )\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(\n      tidyselect::all_of(text_qns[1])\n    )\n)\n\n================================================================================\n\n   Staff_Other_Text_2021\n\n--------------------------------------------------------------------------------\n\n   Storage mode: character\n\n   Valid and missing values       N Percent\n                                           \n   Valid                         42     5.1\n   Missing (NA)                 780    94.9\n   Total                        822        \n                                           \n   Min:                   \"Accountant\"     \n   Max: \"website and graphic designer\""
  },
  {
    "objectID": "02-data-cleaning.html#adding-race-and-gender-answers-from-year-1-survey",
    "href": "02-data-cleaning.html#adding-race-and-gender-answers-from-year-1-survey",
    "title": "Cleaning the Survey Data",
    "section": "Adding Race and Gender Answers from Year 1 Survey",
    "text": "Adding Race and Gender Answers from Year 1 Survey\nQuestions about the race and gender of CEOs and Board Chairs are only presented to users if they indicate that a leadership change has occurred in Year 2 of the survey. Hence, we will need to impute in race and gender responses for participants who did not indicate a change in leadership.\n\nIdentifying cases for imputation\nThese respondents indicate that there were no changes to their CEO in year 2.\n\nno_ceo_chng_ein &lt;- survey_recode_df %&gt;% \n  dplyr::filter(\n    ! (LeadershipChng_HireCEO == 1 | LeadershipChng_IntrmCEO == 1)\n  ) %&gt;% \n  dplyr::pull(\"EIN\")\n\nno_bchair_chng_ein &lt;- survey_recode_df %&gt;% \n  dplyr::filter(\n    LeadershipChng_ChngBC != 1\n  ) %&gt;% \n  dplyr::pull(\"EIN\")\n\n\n\nProcessing Year 1 Data\nIn Year 1, the survey questions for race and gender are encoded in a single factor variable instead of the multiple boolean variables in Year 2. We will have to wrangle the data from Year 1 into a format for Year 2.\n\n# Wrangle Data for Year 1 Responses on CEO race and Gender\nyear1_CEOchng &lt;- year1_raw %&gt;% \n  dplyr::select(EIN, CEOrace, CEOgender) %&gt;% \n  dplyr::filter(EIN %in% no_ceo_chng_ein,\n                ! CEOrace %in% c(-99, NA),\n                ! CEOgender %in% c(-99, NA)) %&gt;% \n  dplyr::mutate(\n    CEOrace = dplyr::case_match(\n      CEOrace,\n      1 ~ \"AAPI\", 2 ~ \"Black\", 3 ~ \"Hisp\", 4 ~ \"NativeAm\", 5 ~ \"White\", 6 ~ \"Bi\", 7 ~ \"Oth\",\n      .default = \"Oth\"\n    ),\n    CEOgender = dplyr::case_match(\n      CEOgender,\n      1 ~ \"Man\", 2 ~ \"Woman\", 3 ~ \"Trans\", 4 ~ \"NB\", 5 ~ \"Oth\",\n      .default = \"Oth\"\n    ),\n  race_check = 1,\n  gender_check = 1\n  ) %&gt;% \n  tidyr::pivot_wider(\n    names_from = CEOrace,\n    names_glue = \"CEOrace_{CEOrace}\",\n    values_from = race_check, \n    values_fill = 0\n  ) %&gt;% \n  tidyr::pivot_wider(\n    names_from = CEOgender,\n    names_glue = \"CEOgender_{CEOgender}\",\n    values_from = gender_check, \n    values_fill = 0\n  )\n\n# Wrangle Data for Year 1 Responses on Board Chair Race and Gender\nyear1_BCchng &lt;- year1_raw %&gt;% \n  dplyr::select(EIN, BCrace, BCgender) %&gt;% \n  dplyr::filter(EIN %in% no_bchair_chng_ein,\n                ! BCrace %in% c(-99, NA),\n                ! BCgender %in% c(-99, NA)) %&gt;% \n  dplyr::mutate(\n    BCrace = dplyr::case_match(\n      BCrace,\n      1 ~ \"AAPI\", 2 ~ \"Black\", 3 ~ \"Hisp\", 4 ~ \"NativeAm\", 5 ~ \"White\", 6 ~ \"Bi\", 7 ~ \"Oth\",\n      .default = \"Oth\"\n    ),\n    BCgender = dplyr::case_match(\n      BCgender,\n      1 ~ \"Man\", 2 ~ \"Woman\", 3 ~ \"Trans\", 4 ~ \"NB\", 5 ~ \"Oth\",\n      .default = \"Oth\"\n    ),\n  race_check = 1,\n  gender_check = 1\n  ) %&gt;% \n  tidyr::pivot_wider(\n    names_from = BCrace,\n    names_glue = \"BChairrace_{BCrace}\",\n    values_from = race_check, \n    values_fill = 0\n  ) %&gt;% \n  tidyr::pivot_wider(\n    names_from = BCgender,\n    names_glue = \"BChairgender_{BCgender}\",\n    values_from = gender_check, \n    values_fill = 0\n  )\n\n\n\nCreate Biracial Categories in Year 2\nSince the Year 1 data has an indicator for biracial CEOs and Board Chairs, we will have to create a boolean Biracial indicator variable in the Year 2 data that returns a 1 if a CEO or Board Chair belongs to 2 or more racial groups.\n\nrace_ceo_qns_bool &lt;- race_gender_qns_bool[grepl(\"CEOrace\", race_gender_qns_bool)]\nrace_bchair_qns_bool &lt;- race_gender_qns_bool[grepl(\"BChairrace\", race_gender_qns_bool)]\n\nsurvey_recode_df &lt;- survey_recode_df %&gt;%\n  dplyr::rowwise() %&gt;% \n  dplyr::mutate(\n    CEOrace_Bi = ifelse(dplyr::between(\n      sum(dplyr::c_across(tidyselect::all_of(race_ceo_qns_bool)), na.rm = TRUE), 2, 6\n    ), 1, 0),\n   BChairrace_Bi = ifelse(dplyr::between(\n      sum(dplyr::c_across(tidyselect::all_of(race_bchair_qns_bool)), na.rm = TRUE), 2, 6\n    ), 1, 0)  \n  )\n\n\n\nMerge Year 1 Race and Gender Variables with Year 2\n\nrace_ceo_qns_bool &lt;- c(race_ceo_qns_bool, \"CEOrace_Bi\")\n\nfor (race_var in race_ceo_qns_bool){\n  survey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    !! race_var := ifelse(\n    EIN %in% year1_CEOchng$EIN, \n    year1_CEOchng[[race_var]], \n    .data[[race_var]]\n    )\n  )\n}\n\ngender_ceo_qns_bool &lt;- race_gender_qns_bool[grepl(\"CEOgender\", race_gender_qns_bool)]\n\nfor (gender_var in gender_ceo_qns_bool){\n  survey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    !! gender_var := ifelse(\n    EIN %in% year1_CEOchng$EIN & gender_var %in% names(year1_CEOchng), \n    year1_CEOchng[[gender_var]], \n    .data[[gender_var]]\n    )\n  )\n}\n\nrace_bchair_qns_bool &lt;- c(race_bchair_qns_bool, \"BChairrace_Bi\")\n\nfor (race_var in race_bchair_qns_bool){\n  survey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    !! race_var := ifelse(\n    EIN %in% year1_BCchng$EIN, \n    year1_BCchng[[race_var]], \n    .data[[race_var]]\n    )\n  )\n}\n\ngender_bchair_qns_bool &lt;- race_gender_qns_bool[grepl(\"BChairgender\", race_gender_qns_bool)]\n\nfor (gender_var in gender_bchair_qns_bool){\n  survey_recode_df &lt;- survey_recode_df %&gt;% \n  dplyr::mutate(\n    !! gender_var := ifelse(\n    EIN %in% year1_BCchng$EIN & gender_var %in% names(year1_BCchng), \n    year1_BCchng[[gender_var]], \n    .data[[gender_var]]\n    )\n  )\n}\n\n\n\nRecode New Race and Gender Variables\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  race_ceo_qns_bool, \n  recode_vals = c(0, 1, 99), \n  recode_labs = c(\"No\", \"Yes\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  gender_ceo_qns_bool, \n  recode_vals = c(0, 1, 99), \n  recode_labs = c(\"No\", \"Yes\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  race_bchair_qns_bool, \n  recode_vals = c(0, 1, 99), \n  recode_labs = c(\"No\", \"Yes\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  gender_bchair_qns_bool, \n  recode_vals = c(0, 1, 99), \n  recode_labs = c(\"No\", \"Yes\", \"Incomplete\"), \n  missing_vals = c(99)\n)\n\n\n\nCreate single Race/Gender column\nWhile our race and gender columns are individual binary columns, this is not the case for year 1 and 3 results. Both those years contain single columns for race and gender variables for CEOs and Board Chairs respectively. For easier comparability, we create a new variable aggregating race and gender values for all our individual binary columns.\n\nAggregated Race Variable\n\n\n\n\n\n\n\n\n\n\nOriginal Value\nDescription\nRecode Label\nRecode Value\nMissing ?\n\n\n\n\n1\nAsian/Pacific Islander\nAAPI\n1\nNo\n\n\n1\nBlack/African American\nBlack\n2\nNo\n\n\n1\nLatinx/Hispanic\nHisp\n3\nNo\n\n\n1\nNative American/American Indian\nNativeAm\n4\nNo\n\n\n1\nWhite\nWhite\n5\nNo\n\n\n1\nBi/Multi-racial\nBi\n6\nNo\n\n\n1\nOther (please specify)\nOth\n7\nNo\n\n\n0\nCheckbox Unchecked\nNA\nYes\n\n\n\n\n\n# Create New Race variables\nsurvey_recode_df &lt;- survey_recode_df %&gt;%\n  dplyr::mutate(\n    CEOrace = dplyr::case_when(\n      CEOrace_AAPI == 1 ~ 1,\n      CEOrace_Black == 1 ~ 2,\n      CEOrace_Hisp == 1 ~ 3,\n      CEOrace_NativeAm == 1 ~ 4,\n      CEOrace_White == 1 ~ 5,\n      CEOrace_Bi == 1 ~ 6,\n      CEOrace_Oth == 1 ~ 7,\n      .default = NA\n    ),\n    BChairrace = dplyr::case_when(\n      BChairrace_AAPI == 1 ~ 1,\n      BChairrace_Black == 1 ~ 2,\n      BChairrace_Hisp == 1 ~ 3,\n      BChairrace_NativeAm == 1 ~ 4,\n      BChairrace_White == 1 ~ 5,\n      BChairrace_Bi == 1 ~ 6,\n      BChairrace_Oth == 1 ~ 7,\n      .default = NA\n  ))\n\n# Create Survey Item\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  c(\"CEOrace\", \"BChairrace\"), \n  recode_vals = c(1, 2, 3, 4, 5, 6, 7), \n  recode_labs = c(\"AAPI\", \"Black\", \"Hisp\", \"NativeAm\", \"White\", \"Bi\", \"Oth\"), \n  missing_vals = c()\n)\n\n\n\nAggregated Gender Variable\nOriginal Value | Description | Recode Label | Recode Value | Missing ? |\n|1|Man|Man|1|No| |1|Woman|Woman|2|No| |1|Trans|Trans|3|No| |1|Gender non-conforming/Non-Binary|NB|4|No| |1|Other (please specify)|Oth|5|No| |0|Checkbox Unchecked|NA|Yes|\n\n# Create New Race variables\nsurvey_recode_df &lt;- survey_recode_df %&gt;%\n  dplyr::mutate(\n    CEOgender = dplyr::case_when(\n      CEOgender_Man == 1 ~ 1,\n      CEOgender_Woman == 1 ~ 2,\n      CEOgender_Trans == 1 ~ 3,\n      CEOgender_NB == 1 ~ 4,\n      CEOgender_Oth == 1 ~ 5,\n      .default = NA\n    ),\n    BChairgender = dplyr::case_when(\n      BChairgender_Man == 1 ~ 1,\n      BChairgender_Woman == 1 ~ 2,\n      BChairgender_Trans == 1 ~ 3,\n      BChairgender_NB == 1 ~ 4,\n      BChairgender_Oth == 1 ~ 5,\n      .default = NA\n  ))\n\n# Create Survey Item\nsurvey_recode_df &lt;- create_survey_item(\n  survey_recode_df, \n  c(\"CEOgender\", \"BChairgender\"), \n  recode_vals = c(1, 2, 3, 4, 5), \n  recode_labs = c(\"Man\", \"Woman\", \"Trans\", \"NB\", \"Oth\"), \n  missing_vals = c()\n)\n\n\n\n\nValidate Results\nWe can see that the number of valid responses for race and gender questions concerning the CEO and Board Chair have increased.\n\nrace_gender_qns &lt;- c(race_gender_qns_bool, \"CEOrace\", \"CEOgender\", \"BChairrace\",\"BChairgender\")\n\ncodebook(\n  survey_recode_df %&gt;% \n    dplyr::select(tidyselect::all_of(race_gender_qns[1]))\n)\n\n================================================================================\n\n   CEOrace_AAPI\n\n--------------------------------------------------------------------------------\n\n   Storage mode: double\n   Measurement: nominal\n   Missing values: 99\n\n   Values and labels     N Valid Total\n                                      \n    0   'No'           467  99.8  56.8\n    1   'Yes'            1   0.2   0.1\n   99 M 'Incomplete'     2         0.2\n   NA M                352        42.8"
  },
  {
    "objectID": "02-data-cleaning.html#evaluating-survey-completion-rates-and-summing-section-completion",
    "href": "02-data-cleaning.html#evaluating-survey-completion-rates-and-summing-section-completion",
    "title": "Cleaning the Survey Data",
    "section": "Evaluating Survey Completion Rates and Summing Section Completion",
    "text": "Evaluating Survey Completion Rates and Summing Section Completion\nWe next evaluate survey completion rates for each category of questions. We separate our variables into question categories and compute the proportion of valid responses.\n\n# Create named list of variables\n\nsurvey_completion_qns_ls &lt;- list(\n  \"Program Changes\" = program_change_qns_bool,\n  \"People Served\" = people_served_qns_int,\n  \"Next Year's Demand\" = demand_fct_qns,\n  \"Staff & Volunteers\" = staff_qns_int,\n  \"Volunteer Importance\" = volimportance_qns_fct,\n  \"Donor Importance\" = donimportance_qns_fct,\n  \"Fundraising\" = fundraise_qns_bool,\n  \"Major Gift Amount\" = majorgift_qn_num,\n  \"Fundraising Changes\" = fundraise_change_qns_fct,\n  \"Donor Changes\" = fundraise_donor_qns_int,\n  \"Fundraising Sought/Received\" = fundraise_skrcv_qns_bool,\n  \"Revenue Breakdown\" = finance_revenue_qns_num,\n  \"Reserves\" = reserve_qns_num,\n  \"CARES Funding\" = cares_qns_num,\n  \"Finance Changes\" = finance_chng_qns_bool,\n  \"Leadership Changes\" = leadership_chng_qns_bool,\n  \"Race and Gender\" = c(race_gender_qns_bool, \"BChairrace_Bi\", \"CEOrace_Bi\"),\n  \"External Affairs\" = extaffairs_qns_fct,\n  \"Primary Concern\" = primary_cncrn_qn_text)\n# Include Response IDs into questions\nsurvey_completion_qns &lt;- c(\"ResponseId\", unname(unlist(survey_completion_qns_ls)))\n# Subset Survey to only include questions to calculate response rates\nsurvey_subset &lt;- survey_recode_df %&gt;% \n  dplyr::select(\n    tidyselect::all_of(survey_completion_qns)\n    )\n# Compute response rate\nresponse_rate_ls &lt;- purrr::imap(\n  .x = survey_completion_qns_ls,\n  .f = function(qns, qn_group) {\n    # Compute responses for each question belonging to a group\n    sum_ls &lt;- purrr::map(qns,\n           .f = function(qn){\n             rs &lt;- as.integer(survey_subset[[qn]])\n             rs &lt;- ifelse(! is.na(rs), 1, 0)\n             return(rs)\n           })\n    # Perform rowwise sum for questions belonging to a group to get number of valid responses\n    sum_qn &lt;- purrr::pmap(sum_ls, sum, na.rm = TRUE)\n    survey_subset[[qn_group]] &lt;- unlist(sum_qn)\n    # Compute response rate based on number of questions in that group\n    output_df &lt;- survey_subset %&gt;% \n      dplyr::mutate(!!qn_group := .data[[qn_group]] / length(qns)) %&gt;% \n      dplyr::select(tidyselect::all_of(c(\"ResponseId\", qn_group)))\n    return(output_df)\n  },\n  .progress = TRUE\n)\n\nresponse_rate_df &lt;- purrr::reduce(response_rate_ls,\n                                  dplyr::left_join,\n                                  by = \"ResponseId\")\n\n# Exclude Qualtrics Test Responses\ntestcases = c(\n  \"R_1lB6u4BoFZWFeXI\",\n  \"R_3e3RyQttJeNzqLu\",\n  \"R_3kzeIxsE73IIoq9\",\n  \"R_2BxNQBmrv4Dr9Dn\",\n  \"R_Q4WjxQdBfeZbn4B\",\n  \"R_xFNLuOjPbg6iL6N\",\n  \"R_3McyCOS2Gv7FNcd\",\n  \"R_9YWW00fssFUBEYh\",\n  \"R_PNiTwNoQSfvuRkB\",\n  \"R_111PYLkD7mpeFui\",\n  \"R_a59rvIufWBZhAhr\",\n  \"R_3MGb8by31yzxYW7\",\n  \"R_1exbPd4NNpfWrFt\",\n  \"R_2PwfUW9idAwPE1w\",\n  \"R_3EunbLVD5Ce8b93\",\n  \"R_2uO55NoBulnQTvx\",\n  \"R_Wl2yqsO0HXhhaTv\",\n  \"R_1kSRidkXneLKy4u\",\n  \"R_3j3DCg6oVhQWRe0\"\n)\n\nresponse_rate_df &lt;- response_rate_df %&gt;% \n  dplyr::filter(! ResponseId %in% weighted_survey_df$ResponseId)\n\nresponse_rate_df"
  },
  {
    "objectID": "02-data-cleaning.html#save-outputs",
    "href": "02-data-cleaning.html#save-outputs",
    "title": "Cleaning the Survey Data",
    "section": "Save outputs",
    "text": "Save outputs\n\nsetwd(\"Y:/CNP/Generosity Commission/\")\nreadr::write_csv(survey_recode_df,\n                 \"DATA-PREP/02-data-intermediate/02-wave-two/wave-02-data-intermediate-recoded.csv\")"
  },
  {
    "objectID": "04-census-metadata.html",
    "href": "04-census-metadata.html",
    "title": "Appending Census Data",
    "section": "",
    "text": "In this section we’ll append Census metadata to our survey responses. The variables we’ll include can be found on the NCCS census page."
  },
  {
    "objectID": "04-census-metadata.html#tract-level-metadata",
    "href": "04-census-metadata.html#tract-level-metadata",
    "title": "Appending Census Data",
    "section": "Tract-level Metadata",
    "text": "Tract-level Metadata\nWe can now repeat the same process as above but with census crosswalks at the tract and Metro CBSA levels using Tract FIPS and CBSA FIPS from our crosswalks.\n\n# Download Tract-level census metadata\ntract_metadata_df &lt;- readr::read_csv(\n  \"https://nccsdata.s3.us-east-1.amazonaws.com/geo/data/tract/tract_2017-2021.csv\"\n) %&gt;%\n  dplyr::mutate(geoid = as.character(geoid)) %&gt;%\n  dplyr::rename(\"Tract_FIPS\" = \"geoid\",\n                \"Census_Year\" = \"year\") %&gt;%\n  dplyr::select(-Census_Year) %&gt;% # We do not need Census Year\n  rename_at(vars(-Tract_FIPS), function(x)\n    paste0(x, \"_Tract\"))\n\n# Join census metadata via crosswalk\nsurvey_census_df &lt;- survey_census_df %&gt;% \n  tidylog::left_join(\n    xwalk_df,\n    by = \"Block_FIPS\"\n  ) %&gt;% \n  tidylog::left_join(\n    tract_metadata_df,\n    by = \"Tract_FIPS\"\n  )"
  },
  {
    "objectID": "04-census-metadata.html#cbsa-level-metadata",
    "href": "04-census-metadata.html#cbsa-level-metadata",
    "title": "Appending Census Data",
    "section": "CBSA Level Metadata",
    "text": "CBSA Level Metadata\n\n# Download CBSA-level census metadata\ncbsa_metadata_df &lt;- readr::read_csv(\n  \"https://nccsdata.s3.us-east-1.amazonaws.com/geo/data/msa/msa_2017-2021.csv\"\n) %&gt;%\n  dplyr::mutate(cbsa_code = as.character(cbsa_code)) %&gt;%\n  dplyr::rename(\"CBSA_FIPS\" = \"cbsa_code\",\n                \"Census_Year\" = \"year\") %&gt;%\n  dplyr::select(-Census_Year) %&gt;% \n  rename_at(vars(-CBSA_FIPS), function(x)\n    paste0(x, \"_CBSA\"))\n\n# Merge into survey dataset\nsurvey_census_df &lt;- survey_census_df %&gt;% \n  tidylog::left_join(\n    cbsa_metadata_df,\n    by = \"CBSA_FIPS\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  }
]